'use client';

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { useTheme } from '@/components/theme/theme-provider';
import { TrendingUp, BarChart3 } from 'lucide-react';

interface TrendData {
  date: string;
  CRITICAL: number;
  HIGH: number;
  MEDIUM: number;
  LOW: number;
}

interface VulnerabilityTrendsProps {
  data: TrendData[];
  isLoading?: boolean;
}

export default function VulnerabilityTrends({
  data,
  isLoading = false,
}: VulnerabilityTrendsProps) {
  const { preferences } = useTheme();

  // Apply user preferences for styling
  const getFontSizeClass = () => {
    switch (preferences?.fontSize) {
      case 'small': return 'text-sm';
      case 'large': return 'text-lg';
      default: return 'text-base';
    }
  };

  const getHighContrastClass = () => {
    return preferences?.highContrast ? 'border-2 border-white/40' : '';
  };
  if (isLoading) {
    return (
      <Card className={`bg-white/5 border-white/10 backdrop-blur-sm ${getHighContrastClass()}`}>
        <CardHeader>
          <CardTitle className="text-white flex items-center space-x-2">
            <TrendingUp className="h-5 w-5 text-green-400" />
            <span>Vulnerability Trends</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="animate-pulse space-y-4">
            <div className="h-64 bg-white/10 rounded"></div>
            <div className="flex space-x-4">
              {[...Array(4)].map((_, i) => (
                <div key={i} className="h-4 bg-white/10 rounded flex-1"></div>
              ))}
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  const maxValue = Math.max(
    ...data.map((d) => d.CRITICAL + d.HIGH + d.MEDIUM + d.LOW)
  );
  const totalVulns = data.reduce(
    (sum, d) => sum + d.CRITICAL + d.HIGH + d.MEDIUM + d.LOW,
    0
  );

  const getBarHeight = (value: number) => {
    return maxValue > 0 ? (value / maxValue) * 200 : 0;
  };

  const _getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical':
        return 'bg-red-500';
      case 'high':
        return 'bg-orange-500';
      case 'medium':
        return 'bg-yellow-500';
      case 'low':
        return 'bg-green-500';
      default:
        return 'bg-gray-500';
    }
  };

  return (
    <Card className={`bg-white/5 border-white/10 backdrop-blur-sm ${getHighContrastClass()}`}>
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="text-white flex items-center space-x-2">
            <TrendingUp className="h-5 w-5 text-green-400" />
            <span>Vulnerability Trends</span>
          </CardTitle>
          <div className="flex items-center space-x-2">
            <Badge className="bg-green-500/20 text-green-300 border-green-500/30">
              {data.length} days
            </Badge>
            <Badge className="bg-blue-500/20 text-blue-300 border-blue-500/30">
              {totalVulns} total
            </Badge>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        {data.length === 0 ? (
          <div className="flex flex-col items-center justify-center h-64 text-white/60">
            <BarChart3 className="h-16 w-16 mb-4 opacity-50" />
            <p className="text-lg font-medium">No trend data available</p>
            <p className="text-sm">
              Data will appear as vulnerabilities are discovered
            </p>
          </div>
        ) : (
          <div className="space-y-6">
            {/* Chart */}
            <div className="relative h-64 flex items-end justify-between space-x-1 bg-white/5 rounded-lg p-4">
              {data.map((item, index) => {
                const total =
                  item.CRITICAL + item.HIGH + item.MEDIUM + item.LOW;
                return (
                  <div
                    key={index}
                    className="flex flex-col items-center space-y-2 flex-1"
                  >
                    <div className="relative w-full max-w-8 flex flex-col justify-end h-48">
                      {/* Stacked bars */}
                      {item.CRITICAL > 0 && (
                        <div
                          className="bg-red-500 w-full rounded-t-sm"
                          style={{ height: `${getBarHeight(item.CRITICAL)}px` }}
                          title={`Critical: ${item.CRITICAL}`}
                        />
                      )}
                      {item.HIGH > 0 && (
                        <div
                          className="bg-orange-500 w-full"
                          style={{ height: `${getBarHeight(item.HIGH)}px` }}
                          title={`High: ${item.HIGH}`}
                        />
                      )}
                      {item.MEDIUM > 0 && (
                        <div
                          className="bg-yellow-500 w-full"
                          style={{ height: `${getBarHeight(item.MEDIUM)}px` }}
                          title={`Medium: ${item.MEDIUM}`}
                        />
                      )}
                      {item.LOW > 0 && (
                        <div
                          className="bg-green-500 w-full rounded-b-sm"
                          style={{ height: `${getBarHeight(item.LOW)}px` }}
                          title={`Low: ${item.LOW}`}
                        />
                      )}
                      {total === 0 && (
                        <div className="bg-gray-600 w-full h-1 rounded" />
                      )}
                    </div>
                    <div className="text-xs text-white/60 text-center">
                      <div className="font-medium">{total}</div>
                      <div>{new Date(item.date).getDate()}</div>
                    </div>
                  </div>
                );
              })}
            </div>

            {/* Legend */}
            <div className="flex items-center justify-center space-x-6">
              <div className="flex items-center space-x-2">
                <div className="w-3 h-3 bg-red-500 rounded"></div>
                <span className="text-sm text-white/80">Critical</span>
              </div>
              <div className="flex items-center space-x-2">
                <div className="w-3 h-3 bg-orange-500 rounded"></div>
                <span className="text-sm text-white/80">High</span>
              </div>
              <div className="flex items-center space-x-2">
                <div className="w-3 h-3 bg-yellow-500 rounded"></div>
                <span className="text-sm text-white/80">Medium</span>
              </div>
              <div className="flex items-center space-x-2">
                <div className="w-3 h-3 bg-green-500 rounded"></div>
                <span className="text-sm text-white/80">Low</span>
              </div>
            </div>

            {/* Summary Stats */}
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 pt-4 border-t border-white/10">
              <div className="text-center">
                <div className="text-2xl font-bold text-red-400">
                  {data.reduce((sum, d) => sum + d.CRITICAL, 0)}
                </div>
                <div className="text-sm text-white/60">Critical</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-orange-400">
                  {data.reduce((sum, d) => sum + d.HIGH, 0)}
                </div>
                <div className="text-sm text-white/60">High</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-yellow-400">
                  {data.reduce((sum, d) => sum + d.MEDIUM, 0)}
                </div>
                <div className="text-sm text-white/60">Medium</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-green-400">
                  {data.reduce((sum, d) => sum + d.LOW, 0)}
                </div>
                <div className="text-sm text-white/60">Low</div>
              </div>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
