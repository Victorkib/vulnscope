'use client';

import { useState, useEffect, useCallback } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Checkbox } from '@/components/ui/checkbox';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';
import {
  formatRelativeTime,
  getSeverityBadgeColor,
  getCvssColor,
} from '@/lib/utils';
import type { Vulnerability } from '@/types/vulnerability';
import {
  ChevronLeft,
  ChevronRight,
  ChevronsLeft,
  ChevronsRight,
  ArrowUpDown,
  ArrowUp,
  ArrowDown,
  Search,
  Filter,
  Download,
  Eye,
  ExternalLink,
  AlertTriangle,
  Shield,
  Bug,
  Zap,
  Calendar,
  TrendingUp,
  RefreshCw,
  Loader2,
} from 'lucide-react';

interface VulnerabilityTableProps {
  initialData?: {
    vulnerabilities: Vulnerability[];
    pagination: any;
    filters: any;
  };
}

export default function VulnerabilityTable({
  initialData,
}: VulnerabilityTableProps) {
  const router = useRouter();
  const searchParams = useSearchParams();
  const { toast } = useToast();

  // State management
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>(
    initialData?.vulnerabilities || []
  );
  const [pagination, setPagination] = useState(
    initialData?.pagination || {
      currentPage: 1,
      totalPages: 1,
      totalCount: 0,
      limit: 25,
      hasNextPage: false,
      hasPrevPage: false,
      startIndex: 1,
      endIndex: 0,
    }
  );
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [selectedVulns, setSelectedVulns] = useState<Set<string>>(new Set());
  const [jumpToPage, setJumpToPage] = useState('');

  // Filter states
  const [filters, setFilters] = useState({
    search: searchParams.get('search') || '',
    severity: searchParams.get('severity') || 'all',
    sortBy: searchParams.get('sortBy') || 'publishedDate',
    sortOrder: searchParams.get('sortOrder') || 'desc',
    page: Number.parseInt(searchParams.get('page') || '1'),
    limit: Number.parseInt(searchParams.get('limit') || '25'),
    minCvss: Number.parseFloat(searchParams.get('minCvss') || '0'),
    maxCvss: Number.parseFloat(searchParams.get('maxCvss') || '10'),
    exploitAvailable: searchParams.get('exploitAvailable') || 'any',
    patchAvailable: searchParams.get('patchAvailable') || 'any',
    kev: searchParams.get('kev') || 'any',
    trending: searchParams.get('trending') || 'any',
  });

  // Fetch vulnerabilities
  const fetchVulnerabilities = useCallback(
    async (newFilters = filters) => {
      try {
        setLoading(true);
        setError(null);

        const params = new URLSearchParams();
        Object.entries(newFilters).forEach(([key, value]) => {
          if (value !== '' && value !== null && value !== undefined) {
            params.set(key, value.toString());
          }
        });

        const response = await fetch(
          `/api/vulnerabilities?${params.toString()}`
        );

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Failed to fetch vulnerabilities');
        }

        const data = await response.json();
        setVulnerabilities(data.vulnerabilities);
        setPagination(data.pagination);
        setSelectedVulns(new Set()); // Clear selections when data changes

        // Update URL without triggering navigation
        const newUrl = `${window.location.pathname}?${params.toString()}`;
        window.history.replaceState({}, '', newUrl);
      } catch (error) {
        console.error('Error fetching vulnerabilities:', error);
        setError(
          error instanceof Error
            ? error.message
            : 'Failed to fetch vulnerabilities'
        );
        toast({
          title: 'Error',
          description:
            error instanceof Error
              ? error.message
              : 'Failed to fetch vulnerabilities',
          variant: 'destructive',
        });
      } finally {
        setLoading(false);
      }
    },
    [filters, toast]
  );

  // Update filters and fetch data
  const updateFilters = useCallback(
    (newFilters: Partial<typeof filters>) => {
      const updatedFilters = { ...filters, ...newFilters, page: 1 }; // Reset to page 1 when filters change
      setFilters(updatedFilters);
      fetchVulnerabilities(updatedFilters);
    },
    [filters, fetchVulnerabilities]
  );

  // Page navigation
  const goToPage = useCallback(
    (page: number) => {
      if (page >= 1 && page <= pagination.totalPages && page !== filters.page) {
        const newFilters = { ...filters, page };
        setFilters(newFilters);
        fetchVulnerabilities(newFilters);

        // Scroll to top of table
        window.scrollTo({ top: 0, behavior: 'smooth' });
      }
    },
    [filters, pagination.totalPages, fetchVulnerabilities]
  );

  // Handle jump to page
  const handleJumpToPage = () => {
    const pageNum = Number.parseInt(jumpToPage);
    if (pageNum && pageNum >= 1 && pageNum <= pagination.totalPages) {
      goToPage(pageNum);
      setJumpToPage('');
    }
  };

  // Selection handlers
  const toggleSelectAll = () => {
    if (selectedVulns.size === vulnerabilities.length) {
      setSelectedVulns(new Set());
    } else {
      setSelectedVulns(new Set(vulnerabilities.map((v) => v.cveId)));
    }
  };

  const toggleSelectVuln = (cveId: string) => {
    const newSelected = new Set(selectedVulns);
    if (newSelected.has(cveId)) {
      newSelected.delete(cveId);
    } else {
      newSelected.add(cveId);
    }
    setSelectedVulns(newSelected);
  };

  // Sort handler
  const handleSort = (field: string) => {
    const newSortOrder =
      filters.sortBy === field && filters.sortOrder === 'desc' ? 'asc' : 'desc';
    updateFilters({ sortBy: field, sortOrder: newSortOrder });
  };

  // Get sort icon
  const getSortIcon = (field: string) => {
    if (filters.sortBy !== field) return <ArrowUpDown className="h-4 w-4" />;
    return filters.sortOrder === 'asc' ? (
      <ArrowUp className="h-4 w-4" />
    ) : (
      <ArrowDown className="h-4 w-4" />
    );
  };

  // Bulk actions
  const handleBulkExport = async () => {
    if (selectedVulns.size === 0) return;

    try {
      const selectedData = vulnerabilities.filter((v) =>
        selectedVulns.has(v.cveId)
      );
      const exportData = {
        exportedAt: new Date().toISOString(),
        totalSelected: selectedVulns.size,
        vulnerabilities: selectedData,
      };

      const blob = new Blob([JSON.stringify(exportData, null, 2)], {
        type: 'application/json',
      });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `vulnerabilities-export-${
        new Date().toISOString().split('T')[0]
      }.json`;
      document.body.appendChild(a);
      a.click();
      URL.revokeObjectURL(url);
      document.body.removeChild(a);

      toast({
        title: 'Export Successful',
        description: `Exported ${selectedVulns.size} vulnerabilities`,
      });
    } catch (error) {
      toast({
        title: 'Export Failed',
        description: 'Failed to export selected vulnerabilities',
        variant: 'destructive',
      });
    }
  };

  // Initial load
  useEffect(() => {
    if (!initialData) {
      fetchVulnerabilities();
    }
  }, []);

  if (error && vulnerabilities.length === 0) {
    return (
      <Card className="border-0 shadow-lg">
        <CardContent className="p-8 text-center">
          <AlertTriangle className="h-12 w-12 text-red-500 mx-auto mb-4" />
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
            Error Loading Vulnerabilities
          </h3>
          <p className="text-gray-600 dark:text-gray-400 mb-4">{error}</p>
          <Button onClick={() => fetchVulnerabilities()} variant="outline">
            <RefreshCw className="h-4 w-4 mr-2" />
            Retry
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      {/* Filters and Search */}
      <Card className="border-0 shadow-lg">
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <Filter className="h-5 w-5 text-blue-600" />
              <span>Filters & Search</span>
            </div>
            <div className="flex items-center space-x-2 text-sm text-gray-500">
              <span>
                Showing {pagination.startIndex}-{pagination.endIndex} of{' '}
                {pagination.totalCount.toLocaleString()} vulnerabilities
              </span>
            </div>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {/* Search */}
            <div className="lg:col-span-2">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <Input
                  placeholder="Search CVE ID, title, description..."
                  value={filters.search}
                  onChange={(e) => updateFilters({ search: e.target.value })}
                  className="pl-10"
                />
              </div>
            </div>

            {/* Severity Filter */}
            <Select
              value={filters.severity}
              onValueChange={(value) => updateFilters({ severity: value })}
            >
              <SelectTrigger>
                <SelectValue placeholder="All Severities" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Severities</SelectItem>
                <SelectItem value="CRITICAL">Critical</SelectItem>
                <SelectItem value="HIGH">High</SelectItem>
                <SelectItem value="MEDIUM">Medium</SelectItem>
                <SelectItem value="LOW">Low</SelectItem>
              </SelectContent>
            </Select>

            {/* Page Size */}
            <Select
              value={filters.limit.toString()}
              onValueChange={(value) =>
                updateFilters({ limit: Number.parseInt(value) })
              }
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="10">10 per page</SelectItem>
                <SelectItem value="25">25 per page</SelectItem>
                <SelectItem value="50">50 per page</SelectItem>
                <SelectItem value="100">100 per page</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* Additional Filters */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-4">
            <Select
              value={filters.exploitAvailable}
              onValueChange={(value) =>
                updateFilters({ exploitAvailable: value })
              }
            >
              <SelectTrigger>
                <SelectValue placeholder="Exploit Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="any">Any Exploit Status</SelectItem>
                <SelectItem value="true">Exploit Available</SelectItem>
                <SelectItem value="false">No Known Exploits</SelectItem>
              </SelectContent>
            </Select>

            <Select
              value={filters.patchAvailable}
              onValueChange={(value) =>
                updateFilters({ patchAvailable: value })
              }
            >
              <SelectTrigger>
                <SelectValue placeholder="Patch Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="any">Any Patch Status</SelectItem>
                <SelectItem value="true">Patch Available</SelectItem>
                <SelectItem value="false">No Patch Available</SelectItem>
              </SelectContent>
            </Select>

            <Select
              value={filters.kev}
              onValueChange={(value) => updateFilters({ kev: value })}
            >
              <SelectTrigger>
                <SelectValue placeholder="KEV Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="any">Any KEV Status</SelectItem>
                <SelectItem value="true">In KEV Catalog</SelectItem>
                <SelectItem value="false">Not in KEV</SelectItem>
              </SelectContent>
            </Select>

            <Select
              value={filters.trending}
              onValueChange={(value) => updateFilters({ trending: value })}
            >
              <SelectTrigger>
                <SelectValue placeholder="Trending Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="any">Any Trending Status</SelectItem>
                <SelectItem value="true">Trending</SelectItem>
                <SelectItem value="false">Not Trending</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </CardContent>
      </Card>

      {/* Bulk Actions */}
      {selectedVulns.size > 0 && (
        <Card className="border-0 shadow-lg bg-blue-50 dark:bg-blue-900/20">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-2">
                <span className="text-sm font-medium text-blue-700 dark:text-blue-300">
                  {selectedVulns.size} vulnerabilities selected
                </span>
              </div>
              <div className="flex items-center space-x-2">
                <Button variant="outline" size="sm" onClick={handleBulkExport}>
                  <Download className="h-4 w-4 mr-2" />
                  Export Selected
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setSelectedVulns(new Set())}
                >
                  Clear Selection
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Table */}
      <Card className="border-0 shadow-lg">
        <CardContent className="p-0">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50 dark:bg-gray-800">
                <tr>
                  <th className="sticky left-0 bg-gray-50 dark:bg-gray-800 px-4 py-3 text-left">
                    <Checkbox
                      checked={
                        selectedVulns.size === vulnerabilities.length &&
                        vulnerabilities.length > 0
                      }
                      onCheckedChange={toggleSelectAll}
                    />
                  </th>
                  <th className="px-4 py-3 text-left">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleSort('cveId')}
                      className="font-semibold text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white"
                    >
                      CVE ID {getSortIcon('cveId')}
                    </Button>
                  </th>
                  <th className="px-4 py-3 text-left min-w-[300px]">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleSort('title')}
                      className="font-semibold text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white"
                    >
                      Title {getSortIcon('title')}
                    </Button>
                  </th>
                  <th className="px-4 py-3 text-left">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleSort('severity')}
                      className="font-semibold text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white"
                    >
                      Severity {getSortIcon('severity')}
                    </Button>
                  </th>
                  <th className="px-4 py-3 text-left">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleSort('cvssScore')}
                      className="font-semibold text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white"
                    >
                      CVSS {getSortIcon('cvssScore')}
                    </Button>
                  </th>
                  <th className="px-4 py-3 text-left">Status</th>
                  <th className="px-4 py-3 text-left">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleSort('publishedDate')}
                      className="font-semibold text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white"
                    >
                      Published {getSortIcon('publishedDate')}
                    </Button>
                  </th>
                  <th className="sticky right-0 bg-gray-50 dark:bg-gray-800 px-4 py-3 text-right">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                {loading ? (
                  // Loading skeleton
                  Array.from({ length: filters.limit }).map((_, index) => (
                    <tr key={index} className="animate-pulse">
                      <td className="sticky left-0 bg-white dark:bg-gray-900 px-4 py-4">
                        <div className="h-4 w-4 bg-gray-200 dark:bg-gray-700 rounded"></div>
                      </td>
                      <td className="px-4 py-4">
                        <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-24"></div>
                      </td>
                      <td className="px-4 py-4">
                        <div className="space-y-2">
                          <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-full"></div>
                          <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded w-3/4"></div>
                        </div>
                      </td>
                      <td className="px-4 py-4">
                        <div className="h-6 bg-gray-200 dark:bg-gray-700 rounded w-16"></div>
                      </td>
                      <td className="px-4 py-4">
                        <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-8"></div>
                      </td>
                      <td className="px-4 py-4">
                        <div className="flex space-x-1">
                          <div className="h-4 w-4 bg-gray-200 dark:bg-gray-700 rounded"></div>
                          <div className="h-4 w-4 bg-gray-200 dark:bg-gray-700 rounded"></div>
                          <div className="h-4 w-4 bg-gray-200 dark:bg-gray-700 rounded"></div>
                        </div>
                      </td>
                      <td className="px-4 py-4">
                        <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-20"></div>
                      </td>
                      <td className="sticky right-0 bg-white dark:bg-gray-900 px-4 py-4">
                        <div className="flex space-x-1">
                          <div className="h-8 w-8 bg-gray-200 dark:bg-gray-700 rounded"></div>
                          <div className="h-8 w-8 bg-gray-200 dark:bg-gray-700 rounded"></div>
                        </div>
                      </td>
                    </tr>
                  ))
                ) : vulnerabilities.length === 0 ? (
                  <tr>
                    <td colSpan={8} className="px-4 py-12 text-center">
                      <div className="flex flex-col items-center space-y-4">
                        <Search className="h-12 w-12 text-gray-400" />
                        <div>
                          <h3 className="text-lg font-medium text-gray-900 dark:text-white">
                            No vulnerabilities found
                          </h3>
                          <p className="text-gray-500 dark:text-gray-400">
                            Try adjusting your search criteria or filters
                          </p>
                        </div>
                        <Button
                          variant="outline"
                          onClick={() =>
                            updateFilters({
                              search: '',
                              severity: 'all',
                              exploitAvailable: 'any',
                              patchAvailable: 'any',
                              kev: 'any',
                              trending: 'any',
                            })
                          }
                        >
                          Clear All Filters
                        </Button>
                      </div>
                    </td>
                  </tr>
                ) : (
                  vulnerabilities.map((vuln) => (
                    <tr
                      key={vuln.cveId}
                      className="hover:bg-gray-50 dark:hover:bg-gray-800/50 transition-colors cursor-pointer"
                      onClick={() =>
                        router.push(`/vulnerabilities/${vuln.cveId}`)
                      }
                    >
                      <td
                        className="sticky left-0 bg-white dark:bg-gray-900 px-4 py-4"
                        onClick={(e) => e.stopPropagation()}
                      >
                        <Checkbox
                          checked={selectedVulns.has(vuln.cveId)}
                          onCheckedChange={() => toggleSelectVuln(vuln.cveId)}
                        />
                      </td>
                      <td className="px-4 py-4">
                        <div className="flex items-center space-x-2">
                          <span className="font-mono text-sm text-blue-600 dark:text-blue-400 font-medium">
                            {vuln.cveId}
                          </span>
                          {vuln.trending && (
                            <TrendingUp className="h-4 w-4 text-orange-500" />
                          )}
                        </div>
                      </td>
                      <td className="px-4 py-4 min-w-[300px]">
                        <div>
                          <div className="font-medium text-gray-900 dark:text-white line-clamp-2">
                            {vuln.title}
                          </div>
                          <div className="text-sm text-gray-500 dark:text-gray-400 line-clamp-2 mt-1">
                            {vuln.description}
                          </div>
                        </div>
                      </td>
                      <td className="px-4 py-4">
                        <Badge className={getSeverityBadgeColor(vuln.severity)}>
                          {vuln.severity}
                        </Badge>
                      </td>
                      <td className="px-4 py-4">
                        <span
                          className={`font-bold ${getCvssColor(
                            vuln.cvssScore
                          )}`}
                        >
                          {vuln.cvssScore}
                        </span>
                      </td>
                      <td className="px-4 py-4">
                        <div className="flex items-center space-x-1">
                          {vuln.exploitAvailable && (
                            <div
                              className="flex items-center"
                              title="Exploit Available"
                            >
                              <Bug className="h-4 w-4 text-red-500" />
                            </div>
                          )}
                          {vuln.patchAvailable && (
                            <div
                              className="flex items-center"
                              title="Patch Available"
                            >
                              <Shield className="h-4 w-4 text-green-500" />
                            </div>
                          )}
                          {vuln.kev && (
                            <div
                              className="flex items-center"
                              title="Known Exploited Vulnerability"
                            >
                              <Zap className="h-4 w-4 text-purple-500" />
                            </div>
                          )}
                        </div>
                      </td>
                      <td className="px-4 py-4">
                        <div className="flex items-center space-x-1 text-sm text-gray-500 dark:text-gray-400">
                          <Calendar className="h-4 w-4" />
                          <span>{formatRelativeTime(vuln.publishedDate)}</span>
                        </div>
                      </td>
                      <td
                        className="sticky right-0 bg-white dark:bg-gray-900 px-4 py-4"
                        onClick={(e) => e.stopPropagation()}
                      >
                        <div className="flex items-center space-x-1">
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() =>
                              router.push(`/vulnerabilities/${vuln.cveId}`)
                            }
                            title="View Details"
                          >
                            <Eye className="h-4 w-4" />
                          </Button>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() =>
                              window.open(
                                `https://nvd.nist.gov/vuln/detail/${vuln.cveId}`,
                                '_blank'
                              )
                            }
                            title="View on NVD"
                          >
                            <ExternalLink className="h-4 w-4" />
                          </Button>
                        </div>
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>

      {/* Pagination */}
      <Card className="border-0 shadow-lg">
        <CardContent className="p-4">
          <div className="flex flex-col sm:flex-row items-center justify-between space-y-4 sm:space-y-0">
            <div className="flex items-center space-x-4 text-sm text-gray-600 dark:text-gray-400">
              <span>
                Showing {pagination.startIndex}-{pagination.endIndex} of{' '}
                {pagination.totalCount.toLocaleString()} vulnerabilities
              </span>
              {loading && (
                <div className="flex items-center space-x-2">
                  <Loader2 className="h-4 w-4 animate-spin" />
                  <span>Loading...</span>
                </div>
              )}
            </div>

            <div className="flex items-center space-x-2">
              {/* Jump to page */}
              <div className="flex items-center space-x-2">
                <span className="text-sm text-gray-600 dark:text-gray-400">
                  Go to:
                </span>
                <Input
                  type="number"
                  min="1"
                  max={pagination.totalPages}
                  value={jumpToPage}
                  onChange={(e) => setJumpToPage(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && handleJumpToPage()}
                  className="w-16 h-8 text-center"
                  placeholder={pagination.currentPage.toString()}
                />
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handleJumpToPage}
                  disabled={!jumpToPage}
                >
                  Go
                </Button>
              </div>

              {/* Pagination controls */}
              <div className="flex items-center space-x-1">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => goToPage(1)}
                  disabled={!pagination.hasPrevPage || loading}
                  title="First page"
                >
                  <ChevronsLeft className="h-4 w-4" />
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => goToPage(pagination.currentPage - 1)}
                  disabled={!pagination.hasPrevPage || loading}
                  title="Previous page"
                >
                  <ChevronLeft className="h-4 w-4" />
                </Button>

                <div className="flex items-center space-x-1">
                  {/* Show page numbers around current page */}
                  {Array.from(
                    { length: Math.min(5, pagination.totalPages) },
                    (_, i) => {
                      let pageNum;
                      if (pagination.totalPages <= 5) {
                        pageNum = i + 1;
                      } else if (pagination.currentPage <= 3) {
                        pageNum = i + 1;
                      } else if (
                        pagination.currentPage >=
                        pagination.totalPages - 2
                      ) {
                        pageNum = pagination.totalPages - 4 + i;
                      } else {
                        pageNum = pagination.currentPage - 2 + i;
                      }

                      return (
                        <Button
                          key={pageNum}
                          variant={
                            pageNum === pagination.currentPage
                              ? 'default'
                              : 'outline'
                          }
                          size="sm"
                          onClick={() => goToPage(pageNum)}
                          disabled={loading}
                          className="w-8 h-8 p-0"
                        >
                          {pageNum}
                        </Button>
                      );
                    }
                  )}
                </div>

                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => goToPage(pagination.currentPage + 1)}
                  disabled={!pagination.hasNextPage || loading}
                  title="Next page"
                >
                  <ChevronRight className="h-4 w-4" />
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => goToPage(pagination.totalPages)}
                  disabled={!pagination.hasNextPage || loading}
                  title="Last page"
                >
                  <ChevronsRight className="h-4 w-4" />
                </Button>
              </div>

              <div className="text-sm text-gray-600 dark:text-gray-400">
                Page {pagination.currentPage} of {pagination.totalPages}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
