'use client';

import { useState, useEffect, useCallback } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Checkbox } from '@/components/ui/checkbox';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';
import { useTheme } from '@/components/theme/theme-provider';
import {
  formatRelativeTime,
  getSeverityBadgeColor,
  getCvssColor,
} from '@/lib/utils';
import type { Vulnerability, VulnerabilityTableProps as BaseVulnerabilityTableProps } from '@/types/vulnerability';

interface PaginationData {
  currentPage: number;
  totalPages: number;
  totalCount: number;
  limit: number;
  hasNext: boolean;
  hasPrev: boolean;
  startIndex: number;
  endIndex: number;
}
import {
  ChevronLeft,
  ChevronRight,
  ChevronsLeft,
  ChevronsRight,
  ArrowUpDown,
  ArrowUp,
  ArrowDown,
  Search,
  Filter,
  Download,
  Eye,
  ExternalLink,
  AlertTriangle,
  Shield,
  Bug,
  Zap,
  Calendar,
  TrendingUp,
  RefreshCw,
  Loader2,
  Grid3X3,
  Database,
} from 'lucide-react';

interface VulnerabilityTableProps extends BaseVulnerabilityTableProps {
  initialData?: {
    vulnerabilities: Vulnerability[];
    pagination: PaginationData;
    filters: Record<string, unknown>;
  };
  pagination?: PaginationData;
  onPageChange?: (page: number) => void;
  onLimitChange?: (limit: number) => void;
  onSortChange?: (field: string, direction: 'asc' | 'desc') => void;
  error?: string | null;
  onRetry?: () => void;
  onBulkAction?: (action: string, selectedIds: string[]) => void;
  onVulnerabilityClick?: (vulnerability: Vulnerability) => void;
  sortField?: string;
  sortDirection?: 'asc' | 'desc';
}

export default function VulnerabilityTable({
  initialData,
  vulnerabilities: propVulnerabilities,
  isLoading: propIsLoading,
  onSort: _onSort,
  onFilter: _onFilter,
  onBookmark: _onBookmark,
  onView: _onView,
  selectedVulnerabilities: propSelectedVulnerabilities,
  onSelectionChange: propOnSelectionChange,
  pagination: propPagination,
  onPageChange,
  onLimitChange: _onLimitChange,
  onSortChange,
  error: propError,
  onRetry: _onRetry,
  onBulkAction: _onBulkAction,
  onVulnerabilityClick,
  sortField: _propSortField,
  sortDirection: _propSortDirection,
}: VulnerabilityTableProps) {
  const router = useRouter();
  const searchParams = useSearchParams();
  const { toast } = useToast();
  const { preferences } = useTheme();

  // Apply user preferences for styling
  const getFontSizeClass = () => {
    switch (preferences?.fontSize) {
      case 'small': return 'text-sm';
      case 'large': return 'text-lg';
      default: return 'text-base';
    }
  };

  const getHighContrastClass = () => {
    return preferences?.highContrast ? 'border-2 border-gray-300 dark:border-gray-600' : '';
  };

  const getAnimationClass = () => {
    return preferences?.reduceMotion ? 'transition-none' : 'transition-colors';
  };

  const getScreenReaderClass = () => {
    return preferences?.screenReader ? 'sr-only' : '';
  };

  // State management
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>(
    propVulnerabilities || initialData?.vulnerabilities || []
  );
  const [pagination, setPagination] = useState(
    propPagination || initialData?.pagination || {
      currentPage: 1,
      totalPages: 1,
      totalCount: 0,
      limit: 25,
      hasNext: false,
      hasPrev: false,
      startIndex: 1,
      endIndex: 0,
    }
  );
  const [loading, setLoading] = useState(propIsLoading || false);
  const [error, setError] = useState<string | null>(propError || null);
  const [selectedVulns, setSelectedVulns] = useState<Set<string>>(
    new Set(propSelectedVulnerabilities || [])
  );
  const [jumpToPage, setJumpToPage] = useState('');
  const [viewMode, setViewMode] = useState<'table' | 'cards'>('table');


  // Sync with props
  useEffect(() => {
    if (propVulnerabilities) {
      setVulnerabilities(propVulnerabilities);
    }
  }, [propVulnerabilities]);

  useEffect(() => {
    if (propPagination) {
      setPagination(propPagination);
    }
  }, [propPagination]);

  useEffect(() => {
    if (propIsLoading !== undefined) {
      setLoading(propIsLoading);
    }
  }, [propIsLoading]);

  useEffect(() => {
    if (propError !== undefined) {
      setError(propError);
    }
  }, [propError]);

  useEffect(() => {
    if (propSelectedVulnerabilities) {
      setSelectedVulns(new Set(propSelectedVulnerabilities));
    }
  }, [propSelectedVulnerabilities]);

  // Set view mode based on user preferences
  useEffect(() => {
    if (preferences?.showPreviewCards) {
      setViewMode('cards');
    } else {
      setViewMode('table');
    }
  }, [preferences?.showPreviewCards]);


  // Page navigation
  const goToPage = useCallback(
    (page: number) => {
      if (onPageChange) {
        onPageChange(page);
      } else if (page >= 1 && page <= pagination.totalPages) {
        // Scroll to top of table
        window.scrollTo({ top: 0, behavior: 'smooth' });
      }
    },
    [pagination.totalPages, onPageChange]
  );

  // Handle jump to page
  const handleJumpToPage = () => {
    const pageNum = Number.parseInt(jumpToPage);
    if (pageNum && pageNum >= 1 && pageNum <= pagination.totalPages) {
      goToPage(pageNum);
      setJumpToPage('');
    }
  };

  // Selection handlers
  const toggleSelectAll = () => {
    if (selectedVulns.size === vulnerabilities.length) {
      setSelectedVulns(new Set());
    } else {
      setSelectedVulns(new Set(vulnerabilities.map((v) => v.cveId)));
    }
  };

  const toggleSelectVuln = (cveId: string) => {
    const newSelected = new Set(selectedVulns);
    if (newSelected.has(cveId)) {
      newSelected.delete(cveId);
    } else {
      newSelected.add(cveId);
    }
    setSelectedVulns(newSelected);
    
    // Call prop callback if provided
    if (propOnSelectionChange) {
      propOnSelectionChange(Array.from(newSelected));
    }
  };

  // Sort handler
  const handleSort = (field: string) => {
    if (onSortChange) {
      const newSortOrder = _propSortField === field && _propSortDirection === 'desc' ? 'asc' : 'desc';
      onSortChange(field, newSortOrder);
    }
  };

  // Get sort icon
  const getSortIcon = (field: string) => {
    if (_propSortField !== field) return <ArrowUpDown className="h-4 w-4" />;
    return _propSortDirection === 'asc' ? (
      <ArrowUp className="h-4 w-4" />
    ) : (
      <ArrowDown className="h-4 w-4" />
    );
  };

  // Bulk actions
  const handleBulkExport = async () => {
    if (selectedVulns.size === 0) return;

    try {
      const selectedData = vulnerabilities.filter((v) =>
        selectedVulns.has(v.cveId)
      );
      const exportData = {
        exportedAt: new Date().toISOString(),
        totalSelected: selectedVulns.size,
        vulnerabilities: selectedData,
      };

      const blob = new Blob([JSON.stringify(exportData, null, 2)], {
        type: 'application/json',
      });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `vulnerabilities-export-${
        new Date().toISOString().split('T')[0]
      }.json`;
      document.body.appendChild(a);
      a.click();
      URL.revokeObjectURL(url);
      document.body.removeChild(a);

      toast({
        title: 'Export Successful',
        description: `Exported ${selectedVulns.size} vulnerabilities`,
      });
    } catch (_error) {
      toast({
        title: 'Export Failed',
        description: 'Failed to export selected vulnerabilities',
        variant: 'destructive',
      });
    }
  };

  // Initial load

  if (error && vulnerabilities.length === 0) {
    return (
      <Card className="border-0 shadow-lg">
        <CardContent className="p-8 text-center">
          <AlertTriangle className="h-12 w-12 text-red-500 mx-auto mb-4" />
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
            Error Loading Vulnerabilities
          </h3>
          <p className="text-gray-600 dark:text-gray-400 mb-4">{error}</p>
          <Button onClick={() => _onRetry?.()} variant="outline">
            <RefreshCw className="h-4 w-4 mr-2" />
            Retry
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">

      {/* Bulk Actions */}
      {selectedVulns.size > 0 && (
        <Card className="border-0 shadow-lg bg-blue-50 dark:bg-blue-900/20">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-2">
                <span className="text-sm font-medium text-blue-700 dark:text-blue-300">
                  {selectedVulns.size} vulnerabilities selected
                </span>
              </div>
              <div className="flex items-center space-x-2">
                <Button variant="outline" size="sm" onClick={handleBulkExport}>
                  <Download className="h-4 w-4 mr-2" />
                  Export Selected
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setSelectedVulns(new Set())}
                >
                  Clear Selection
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* View Toggle */}
      <Card className="border-0 shadow-lg">
        <CardContent className="p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                View Mode:
              </span>
              <div className="flex items-center space-x-1 bg-gray-100 dark:bg-gray-800 rounded-lg p-1">
                <Button
                  variant={viewMode === 'table' ? 'default' : 'ghost'}
                  size="sm"
                  onClick={() => setViewMode('table')}
                  className="h-8 px-3"
                >
                  <Database className="h-4 w-4 mr-1" />
                  Table
                </Button>
                <Button
                  variant={viewMode === 'cards' ? 'default' : 'ghost'}
                  size="sm"
                  onClick={() => setViewMode('cards')}
                  className="h-8 px-3"
                >
                  <Grid3X3 className="h-4 w-4 mr-1" />
                  Cards
                </Button>
              </div>
            </div>
            <div className="text-sm text-gray-500 dark:text-gray-400">
              {vulnerabilities.length} vulnerabilities
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Table or Cards View */}
      {viewMode === 'table' ? (
        <Card className="border-0 shadow-lg">
          <CardContent className="p-0">
            <div className="overflow-x-auto">
              <table className={`w-full ${getFontSizeClass()}`}>
              <thead className={`bg-gray-50 dark:bg-gray-800 ${getHighContrastClass()}`}>
                <tr>
                  <th className="sticky left-0 bg-gray-50 dark:bg-gray-800 px-4 py-3 text-left">
                    <Checkbox
                      checked={
                        selectedVulns.size === vulnerabilities.length &&
                        vulnerabilities.length > 0
                      }
                      onCheckedChange={toggleSelectAll}
                      aria-label="Select all vulnerabilities"
                    />
                  </th>
                  <th className="px-4 py-3 text-left">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleSort('cveId')}
                      className="font-semibold text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white"
                    >
                      CVE ID {getSortIcon('cveId')}
                    </Button>
                  </th>
                  <th className="px-4 py-3 text-left min-w-[300px]">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleSort('title')}
                      className="font-semibold text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white"
                    >
                      Title {getSortIcon('title')}
                    </Button>
                  </th>
                  <th className="px-4 py-3 text-left">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleSort('severity')}
                      className="font-semibold text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white"
                    >
                      Severity {getSortIcon('severity')}
                    </Button>
                  </th>
                  <th className="px-4 py-3 text-left">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleSort('cvssScore')}
                      className="font-semibold text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white"
                    >
                      CVSS {getSortIcon('cvssScore')}
                    </Button>
                  </th>
                  <th className="px-4 py-3 text-left">Status</th>
                  <th className="px-4 py-3 text-left">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleSort('publishedDate')}
                      className="font-semibold text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white"
                    >
                      Published {getSortIcon('publishedDate')}
                    </Button>
                  </th>
                  <th className="sticky right-0 bg-gray-50 dark:bg-gray-800 px-4 py-3 text-right">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className={`divide-y divide-gray-200 dark:divide-gray-700 ${getAnimationClass()}`}>
                {loading ? (
                  // Loading skeleton
                  Array.from({ length: pagination.limit }).map((_, index) => (
                    <tr key={index} className="animate-pulse">
                      <td className="sticky left-0 bg-white dark:bg-gray-900 px-4 py-4">
                        <div className="h-4 w-4 bg-gray-200 dark:bg-gray-700 rounded"></div>
                      </td>
                      <td className="px-4 py-4">
                        <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-24"></div>
                      </td>
                      <td className="px-4 py-4">
                        <div className="space-y-2">
                          <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-full"></div>
                          <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded w-3/4"></div>
                        </div>
                      </td>
                      <td className="px-4 py-4">
                        <div className="h-6 bg-gray-200 dark:bg-gray-700 rounded w-16"></div>
                      </td>
                      <td className="px-4 py-4">
                        <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-8"></div>
                      </td>
                      <td className="px-4 py-4">
                        <div className="flex space-x-1">
                          <div className="h-4 w-4 bg-gray-200 dark:bg-gray-700 rounded"></div>
                          <div className="h-4 w-4 bg-gray-200 dark:bg-gray-700 rounded"></div>
                          <div className="h-4 w-4 bg-gray-200 dark:bg-gray-700 rounded"></div>
                        </div>
                      </td>
                      <td className="px-4 py-4">
                        <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-20"></div>
                      </td>
                      <td className="sticky right-0 bg-white dark:bg-gray-900 px-4 py-4">
                        <div className="flex space-x-1">
                          <div className="h-8 w-8 bg-gray-200 dark:bg-gray-700 rounded"></div>
                          <div className="h-8 w-8 bg-gray-200 dark:bg-gray-700 rounded"></div>
                        </div>
                      </td>
                    </tr>
                  ))
                ) : vulnerabilities.length === 0 ? (
                  <tr>
                    <td colSpan={8} className="px-4 py-12 text-center">
                      <div className="flex flex-col items-center space-y-4">
                        <Search className="h-12 w-12 text-gray-400" />
                        <div>
                          <h3 className="text-lg font-medium text-gray-900 dark:text-white">
                            No vulnerabilities found
                          </h3>
                          <p className="text-gray-500 dark:text-gray-400">
                            Try adjusting your search criteria or filters
                          </p>
                        </div>
                      </div>
                    </td>
                  </tr>
                ) : (
                  vulnerabilities.map((vuln) => (
                    <tr
                      key={vuln.cveId}
                      className="hover:bg-gray-50 dark:hover:bg-gray-800/50 transition-colors cursor-pointer"
                      onClick={() => {
                        if (onVulnerabilityClick) {
                          onVulnerabilityClick(vuln);
                        } else {
                          router.push(`/vulnerabilities/${vuln.cveId}`);
                        }
                      }}
                    >
                      <td
                        className="sticky left-0 bg-white dark:bg-gray-900 px-4 py-4"
                        onClick={(e) => e.stopPropagation()}
                      >
                        <Checkbox
                          checked={selectedVulns.has(vuln.cveId)}
                          onCheckedChange={() => toggleSelectVuln(vuln.cveId)}
                        />
                      </td>
                      <td className="px-4 py-4">
                        <div className="flex items-center space-x-2">
                          <span className="font-mono text-sm text-blue-600 dark:text-blue-400 font-medium">
                            {vuln.cveId}
                          </span>
                          {vuln.trending && (
                            <TrendingUp className="h-4 w-4 text-orange-500" />
                          )}
                        </div>
                      </td>
                      <td className="px-4 py-4 min-w-[300px]">
                        <div>
                          <div className="font-medium text-gray-900 dark:text-white line-clamp-2">
                            {vuln.title}
                          </div>
                          <div className="text-sm text-gray-500 dark:text-gray-400 line-clamp-2 mt-1">
                            {vuln.description}
                          </div>
                        </div>
                      </td>
                      <td className="px-4 py-4">
                        <Badge className={getSeverityBadgeColor(vuln.severity)}>
                          {vuln.severity}
                        </Badge>
                      </td>
                      <td className="px-4 py-4">
                        <span
                          className={`font-bold ${getCvssColor(
                            vuln.cvssScore
                          )}`}
                        >
                          {vuln.cvssScore}
                        </span>
                      </td>
                      <td className="px-4 py-4">
                        <div className="flex items-center space-x-1">
                          {vuln.exploitAvailable && (
                            <div
                              className="flex items-center"
                              title="Exploit Available"
                            >
                              <Bug className="h-4 w-4 text-red-500" />
                            </div>
                          )}
                          {vuln.patchAvailable && (
                            <div
                              className="flex items-center"
                              title="Patch Available"
                            >
                              <Shield className="h-4 w-4 text-green-500" />
                            </div>
                          )}
                          {vuln.kev && (
                            <div
                              className="flex items-center"
                              title="Known Exploited Vulnerability"
                            >
                              <Zap className="h-4 w-4 text-purple-500" />
                            </div>
                          )}
                        </div>
                      </td>
                      <td className="px-4 py-4">
                        <div className="flex items-center space-x-1 text-sm text-gray-500 dark:text-gray-400">
                          <Calendar className="h-4 w-4" />
                          <span>{formatRelativeTime(vuln.publishedDate, preferences?.language || 'en')}</span>
                        </div>
                      </td>
                      <td
                        className="sticky right-0 bg-white dark:bg-gray-900 px-4 py-4"
                        onClick={(e) => e.stopPropagation()}
                      >
                        <div className="flex items-center space-x-1">
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() =>
                              router.push(`/vulnerabilities/${vuln.cveId}`)
                            }
                            title="View Details"
                          >
                            <Eye className="h-4 w-4" />
                          </Button>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() =>
                              window.open(
                                `https://nvd.nist.gov/vuln/detail/${vuln.cveId}`,
                                '_blank'
                              )
                            }
                            title="View on NVD"
                          >
                            <ExternalLink className="h-4 w-4" />
                          </Button>
                        </div>
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>
      ) : (
        /* Cards View */
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {loading ? (
            // Loading skeleton for cards
            Array.from({ length: pagination.limit }).map((_, index) => (
              <Card key={index} className="border-0 shadow-lg animate-pulse">
                <CardContent className="p-4">
                  <div className="space-y-3">
                    <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4"></div>
                    <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded w-1/2"></div>
                    <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded w-full"></div>
                    <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded w-2/3"></div>
                  </div>
                </CardContent>
              </Card>
            ))
          ) : vulnerabilities.length === 0 ? (
            <div className="col-span-full text-center py-12">
              <Search className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                No vulnerabilities found
              </h3>
              <p className="text-gray-500 dark:text-gray-400">
                Try adjusting your search criteria or filters
              </p>
            </div>
          ) : (
            vulnerabilities.map((vuln) => (
              <Card key={vuln.cveId} className="border-0 shadow-lg hover:shadow-xl transition-shadow">
                <CardContent className="p-4">
                  <div className="space-y-3">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <h3 className="font-semibold text-gray-900 dark:text-white text-sm">
                          {vuln.cveId}
                        </h3>
                        <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                          {formatRelativeTime(vuln.publishedDate, preferences?.language || 'en')}
                        </p>
                      </div>
                      <Badge
                        variant="outline"
                        className={`text-xs ${
                          vuln.severity === 'CRITICAL'
                            ? 'border-red-500 text-red-700 bg-red-50 dark:bg-red-900/20'
                            : vuln.severity === 'HIGH'
                            ? 'border-orange-500 text-orange-700 bg-orange-50 dark:bg-orange-900/20'
                            : vuln.severity === 'MEDIUM'
                            ? 'border-yellow-500 text-yellow-700 bg-yellow-50 dark:bg-yellow-900/20'
                            : 'border-green-500 text-green-700 bg-green-50 dark:bg-green-900/20'
                        }`}
                      >
                        {vuln.severity}
                      </Badge>
                    </div>
                    
                    <div>
                      <h4 className="font-medium text-gray-900 dark:text-white text-sm line-clamp-2">
                        {vuln.title}
                      </h4>
                      <p className="text-xs text-gray-600 dark:text-gray-400 mt-1 line-clamp-3">
                        {vuln.description}
                      </p>
                    </div>

                    <div className="flex items-center justify-between text-xs text-gray-500 dark:text-gray-400">
                      <span>CVSS: {vuln.cvssScore}</span>
                      <div className="flex items-center space-x-2">
                        {vuln.exploitAvailable && (
                          <Badge variant="destructive" className="text-xs">
                            Exploit
                          </Badge>
                        )}
                        {vuln.kev && (
                          <Badge variant="secondary" className="text-xs">
                            KEV
                          </Badge>
                        )}
                        {vuln.trending && (
                          <Badge variant="outline" className="text-xs">
                            Trending
                          </Badge>
                        )}
                      </div>
                    </div>

                    <div className="flex items-center justify-between pt-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => router.push(`/vulnerabilities/${vuln.cveId}`)}
                        className="text-xs"
                      >
                        View Details
                      </Button>
                      <div className="flex items-center space-x-1">
                        <Checkbox
                          checked={selectedVulns.has(vuln.cveId)}
                          onCheckedChange={(checked) => {
                            const newSelected = new Set(selectedVulns);
                            if (checked) {
                              newSelected.add(vuln.cveId);
                            } else {
                              newSelected.delete(vuln.cveId);
                            }
                            setSelectedVulns(newSelected);
                            propOnSelectionChange?.(Array.from(newSelected));
                          }}
                          className="h-4 w-4"
                        />
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))
          )}
        </div>
      )}

      {/* Pagination */}
      <Card className="border-0 shadow-lg">
        <CardContent className="p-4">
          <div className="flex flex-col sm:flex-row items-center justify-between space-y-4 sm:space-y-0">
            <div className="flex items-center space-x-4 text-sm text-gray-600 dark:text-gray-400">
              <span>
                Showing {pagination.startIndex}-{pagination.endIndex} of{' '}
                {pagination.totalCount.toLocaleString()} vulnerabilities
              </span>
              {loading && (
                <div className="flex items-center space-x-2">
                  <Loader2 className="h-4 w-4 animate-spin" />
                  <span>Loading...</span>
                </div>
              )}
            </div>

            <div className="flex items-center space-x-2">
              {/* Jump to page */}
              <div className="flex items-center space-x-2">
                <span className="text-sm text-gray-600 dark:text-gray-400">
                  Go to:
                </span>
                <Input
                  type="number"
                  min="1"
                  max={pagination.totalPages}
                  value={jumpToPage}
                  onChange={(e) => setJumpToPage(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && handleJumpToPage()}
                  className="w-16 h-8 text-center"
                  placeholder={pagination.currentPage.toString()}
                />
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handleJumpToPage}
                  disabled={!jumpToPage}
                >
                  Go
                </Button>
              </div>

              {/* Pagination controls */}
              <div className="flex items-center space-x-1">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => goToPage(1)}
                  disabled={!pagination.hasPrev || loading}
                  title="First page"
                >
                  <ChevronsLeft className="h-4 w-4" />
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => goToPage(pagination.currentPage - 1)}
                  disabled={!pagination.hasPrev || loading}
                  title="Previous page"
                >
                  <ChevronLeft className="h-4 w-4" />
                </Button>

                <div className="flex items-center space-x-1">
                  {/* Show page numbers around current page */}
                  {Array.from(
                    { length: Math.min(5, pagination.totalPages) },
                    (_, i) => {
                      let pageNum;
                      if (pagination.totalPages <= 5) {
                        pageNum = i + 1;
                      } else if (pagination.currentPage <= 3) {
                        pageNum = i + 1;
                      } else if (
                        pagination.currentPage >=
                        pagination.totalPages - 2
                      ) {
                        pageNum = pagination.totalPages - 4 + i;
                      } else {
                        pageNum = pagination.currentPage - 2 + i;
                      }

                      return (
                        <Button
                          key={pageNum}
                          variant={
                            pageNum === pagination.currentPage
                              ? 'default'
                              : 'outline'
                          }
                          size="sm"
                          onClick={() => goToPage(pageNum)}
                          disabled={loading}
                          className="w-8 h-8 p-0"
                        >
                          {pageNum}
                        </Button>
                      );
                    }
                  )}
                </div>

                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => goToPage(pagination.currentPage + 1)}
                  disabled={!pagination.hasNext || loading}
                  title="Next page"
                >
                  <ChevronRight className="h-4 w-4" />
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => goToPage(pagination.totalPages)}
                  disabled={!pagination.hasNext || loading}
                  title="Last page"
                >
                  <ChevronsRight className="h-4 w-4" />
                </Button>
              </div>

              <div className="text-sm text-gray-600 dark:text-gray-400">
                Page {pagination.currentPage} of {pagination.totalPages}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
