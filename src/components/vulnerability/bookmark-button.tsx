'use client';

import type React from 'react';

import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { useAuth } from '@/components/auth/auth-provider';
import { useToast } from '@/hooks/use-toast';
import { Bookmark, BookmarkCheck, Loader2 } from 'lucide-react';

interface BookmarkButtonProps {
  vulnerabilityId: string;
  size?: 'sm' | 'default' | 'lg';
  variant?: 'default' | 'outline' | 'ghost';
  showText?: boolean;
  className?: string;
}

export default function BookmarkButton({
  vulnerabilityId,
  size = 'sm',
  variant = 'ghost',
  showText = false,
  className = '',
}: BookmarkButtonProps) {
  const { user } = useAuth();
  const { toast } = useToast();
  const [isBookmarked, setIsBookmarked] = useState(false);
  const [loading, setLoading] = useState(false);
  const [checking, setChecking] = useState(true);

  useEffect(() => {
    if (user && vulnerabilityId) {
      checkBookmarkStatus();
    }
  }, [user, vulnerabilityId]);

  const checkBookmarkStatus = async () => {
    if (!user) return;

    try {
      setChecking(true);
      const response = await fetch(`/api/users/bookmarks`);
      if (response.ok) {
        const bookmarks = await response.json();
        const isBookmarked = bookmarks.some(
          (bookmark: any) =>
            bookmark.vulnerabilityId === vulnerabilityId ||
            bookmark.vulnerability?.cveId === vulnerabilityId
        );
        setIsBookmarked(isBookmarked);
      }
    } catch (error) {
      console.error('Error checking bookmark status:', error);
    } finally {
      setChecking(false);
    }
  };

  const toggleBookmark = async (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();

    if (!user) {
      toast({
        title: 'Authentication Required',
        description: 'Please sign in to bookmark vulnerabilities',
        variant: 'destructive',
      });
      return;
    }

    setLoading(true);
    try {
      if (isBookmarked) {
        // Remove bookmark
        const response = await fetch(`/api/users/bookmarks`, {
          method: 'DELETE',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ vulnerabilityId }),
        });

        if (response.ok) {
          setIsBookmarked(false);
          toast({
            title: 'Bookmark Removed',
            description: `${vulnerabilityId} removed from your watchlist`,
          });
        } else {
          throw new Error('Failed to remove bookmark');
        }
      } else {
        // Add bookmark
        const response = await fetch(`/api/users/bookmarks`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            vulnerabilityId,
            notes: '',
            priority: 'medium',
            tags: [],
          }),
        });

        if (response.ok) {
          setIsBookmarked(true);
          toast({
            title: 'Bookmark Added',
            description: `${vulnerabilityId} added to your watchlist`,
          });
        } else {
          throw new Error('Failed to add bookmark');
        }
      }
    } catch (error) {
      console.error('Error toggling bookmark:', error);
      toast({
        title: 'Error',
        description: 'Failed to update bookmark',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  if (!user) return null;

  return (
    <Button
      variant={variant}
      size={size}
      onClick={toggleBookmark}
      disabled={loading || checking}
      className={`${className} ${
        isBookmarked
          ? 'text-yellow-500 hover:text-yellow-600'
          : 'text-gray-500 hover:text-gray-700'
      }`}
      title={isBookmarked ? 'Remove bookmark' : 'Add bookmark'}
    >
      {loading || checking ? (
        <Loader2 className="h-4 w-4 animate-spin" />
      ) : isBookmarked ? (
        <BookmarkCheck className="h-4 w-4" />
      ) : (
        <Bookmark className="h-4 w-4" />
      )}
      {showText && (
        <span className="ml-2">{isBookmarked ? 'Bookmarked' : 'Bookmark'}</span>
      )}
    </Button>
  );
}
