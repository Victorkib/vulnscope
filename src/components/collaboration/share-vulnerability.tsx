'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Switch } from '@/components/ui/switch';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { useToast } from '@/hooks/use-toast';
import { useTheme } from '@/components/theme/theme-provider';
import {
  Share2,
  Users,
  User,
  Mail,
  Lock,
  Eye,
  MessageSquare,
  Edit,
  Share,
} from 'lucide-react';

interface ShareVulnerabilityProps {
  vulnerabilityId: string;
  className?: string;
}

export default function ShareVulnerability({ vulnerabilityId, className }: ShareVulnerabilityProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [shareType, setShareType] = useState<'user' | 'team'>('user');
  const [shareWith, setShareWith] = useState('');
  const [message, setMessage] = useState('');
  const [permissions, setPermissions] = useState({
    canView: true,
    canComment: true,
    canEdit: false,
    canShare: false,
  });
  const [sharing, setSharing] = useState(false);
  const { toast } = useToast();
  const { preferences } = useTheme();

  // Apply user preferences for styling
  const getFontSizeClass = () => {
    switch (preferences?.fontSize) {
      case 'small': return 'text-sm';
      case 'large': return 'text-lg';
      default: return 'text-base';
    }
  };

  const getHighContrastClass = () => {
    return preferences?.highContrast ? 'border-2 border-gray-300 dark:border-gray-600' : '';
  };

  const handleShare = async () => {
    if (!shareWith.trim()) {
      toast({
        title: 'Error',
        description: 'Please specify who to share with',
        variant: 'destructive',
      });
      return;
    }

    try {
      setSharing(true);
      const response = await fetch(`/api/vulnerabilities/${vulnerabilityId}/share`, {
        method: 'POST',
        credentials: 'include',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          shareWith: shareWith.trim(),
          shareType,
          message: message.trim() || undefined,
          permissions,
        }),
      });

      if (response.ok) {
        toast({
          title: 'Vulnerability shared',
          description: `Successfully shared with ${shareWith}`,
        });
        setIsOpen(false);
        setShareWith('');
        setMessage('');
      } else {
        const error = await response.json();
        throw new Error(error.error || 'Failed to share vulnerability');
      }
    } catch (error) {
      toast({
        title: 'Error',
        description: error instanceof Error ? error.message : 'Failed to share vulnerability',
        variant: 'destructive',
      });
    } finally {
      setSharing(false);
    }
  };

  const updatePermission = (key: keyof typeof permissions, value: boolean) => {
    setPermissions(prev => ({
      ...prev,
      [key]: value,
    }));
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button variant="outline" size="sm" className={className}>
          <Share2 className="h-4 w-4 mr-2" />
          Share
        </Button>
      </DialogTrigger>
      <DialogContent className={`sm:max-w-md ${getFontSizeClass()}`}>
        <DialogHeader>
          <DialogTitle className="flex items-center space-x-2">
            <Share2 className="h-5 w-5" />
            <span>Share Vulnerability</span>
          </DialogTitle>
          <DialogDescription>
            Share this vulnerability with team members or other users for collaboration
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4">
          {/* Share Type */}
          <div className="space-y-2">
            <Label>Share with</Label>
            <Select value={shareType} onValueChange={(value: 'user' | 'team') => setShareType(value)}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="user">
                  <div className="flex items-center space-x-2">
                    <User className="h-4 w-4" />
                    <span>Individual User</span>
                  </div>
                </SelectItem>
                <SelectItem value="team">
                  <div className="flex items-center space-x-2">
                    <Users className="h-4 w-4" />
                    <span>Team</span>
                  </div>
                </SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* Share Target */}
          <div className="space-y-2">
            <Label>
              {shareType === 'user' ? 'User Email' : 'Team Name'}
            </Label>
            <div className="relative">
              <input
                type={shareType === 'user' ? 'email' : 'text'}
                placeholder={shareType === 'user' ? 'user@example.com' : 'Team name'}
                value={shareWith}
                onChange={(e) => setShareWith(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              {shareType === 'user' ? (
                <Mail className="absolute right-3 top-2.5 h-4 w-4 text-gray-400" />
              ) : (
                <Users className="absolute right-3 top-2.5 h-4 w-4 text-gray-400" />
              )}
            </div>
          </div>

          {/* Message */}
          <div className="space-y-2">
            <Label>Message (optional)</Label>
            <Textarea
              placeholder="Add a message about why you're sharing this vulnerability..."
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              className="min-h-[80px]"
            />
          </div>

          {/* Permissions */}
          <div className="space-y-3">
            <Label>Permissions</Label>
            <div className="space-y-3 border rounded-lg p-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <Eye className="h-4 w-4 text-gray-500" />
                  <span className="text-sm font-medium">View</span>
                </div>
                <Switch
                  checked={permissions.canView}
                  onCheckedChange={(checked) => updatePermission('canView', checked)}
                />
              </div>
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <MessageSquare className="h-4 w-4 text-gray-500" />
                  <span className="text-sm font-medium">Comment</span>
                </div>
                <Switch
                  checked={permissions.canComment}
                  onCheckedChange={(checked) => updatePermission('canComment', checked)}
                />
              </div>
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <Edit className="h-4 w-4 text-gray-500" />
                  <span className="text-sm font-medium">Edit</span>
                </div>
                <Switch
                  checked={permissions.canEdit}
                  onCheckedChange={(checked) => updatePermission('canEdit', checked)}
                />
              </div>
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <Share className="h-4 w-4 text-gray-500" />
                  <span className="text-sm font-medium">Share</span>
                </div>
                <Switch
                  checked={permissions.canShare}
                  onCheckedChange={(checked) => updatePermission('canShare', checked)}
                />
              </div>
            </div>
          </div>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={() => setIsOpen(false)}>
            Cancel
          </Button>
          <Button onClick={handleShare} disabled={sharing || !shareWith.trim()}>
            {sharing ? 'Sharing...' : 'Share Vulnerability'}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
