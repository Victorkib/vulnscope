'use client';

import { useState, useEffect } from 'react';
import { useAdminAuth } from '@/hooks/use-admin-auth';
import { usePreferences } from '@/contexts/preferences-context';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';
import { apiClient } from '@/lib/api-client';
import type { Vulnerability } from '@/types/vulnerability';
import {
  Database,
  Plus,
  Search,
  Download,
  Upload,
  BarChart3,
  AlertTriangle,
  Shield,
  CheckCircle,
  XCircle,
  Loader2,
  RefreshCw,
  Edit,
  Trash2,
  Eye,
  FileText,
  TrendingUp,
  Activity,
  ChevronLeft,
  ChevronRight,
  ChevronsLeft,
  ChevronsRight,
  Grid3X3,
  List,
} from 'lucide-react';

interface VulnerabilityListResponse {
  success: boolean;
  data: Vulnerability[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    pages: number;
    hasMore: boolean;
  };
}

interface AdminVulnerabilityStats {
  total: number;
  bySeverity: Record<string, number>;
  byCategory: Record<string, number>;
  withExploits: number;
  withPatches: number;
  trending: number;
  recentlyPublished: number;
  dataQuality: {
    completeness: number;
    accuracy: number;
    duplicates: number;
  };
}

export function VulnerabilityManagementTab() {
  const { hasPermission } = useAdminAuth();
  const { preferences } = usePreferences();
  const { toast } = useToast();
  
  // State for vulnerabilities list
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [severityFilter, setSeverityFilter] = useState<string>('all');
  const [viewMode, setViewMode] = useState<'table' | 'cards'>('table');
  const [pagination, setPagination] = useState({
    page: 1,
    limit: preferences?.maxResultsPerPage || 25,
    total: 0,
    pages: 0,
    hasMore: false,
  });

  // State for analytics
  const [analytics, setAnalytics] = useState<AdminVulnerabilityStats | null>(null);
  const [analyticsLoading, setAnalyticsLoading] = useState(false);

  // State for create/edit form
  const [showForm, setShowForm] = useState(false);
  const [editingVulnerability, setEditingVulnerability] = useState<Vulnerability | null>(null);
  const [formData, setFormData] = useState<Partial<Vulnerability>>({});
  const [formLoading, setFormLoading] = useState(false);

  // User preference integration
  const getFontSizeClass = () => {
    switch (preferences?.fontSize) {
      case 'small': return 'text-sm';
      case 'large': return 'text-lg';
      default: return 'text-base';
    }
  };

  const getHighContrastClass = () => {
    return preferences?.highContrast ? 'border-2 border-gray-300 dark:border-gray-600' : '';
  };

  const getAnimationClass = () => {
    return preferences?.reduceMotion ? 'transition-none' : 'transition-colors';
  };

  const getSeverityBadgeVariant = (severity: string) => {
    switch (severity) {
      case 'CRITICAL': return 'destructive';
      case 'HIGH': return 'destructive';
      case 'MEDIUM': return 'default';
      case 'LOW': return 'secondary';
      default: return 'outline';
    }
  };

  // Pagination handlers
  const handlePageChange = (page: number) => {
    setPagination(prev => ({ ...prev, page }));
  };

  const handleLimitChange = (limit: number) => {
    setPagination(prev => ({ ...prev, limit, page: 1 }));
  };

  // Update pagination limit when preferences change
  useEffect(() => {
    if (preferences?.maxResultsPerPage && preferences.maxResultsPerPage !== pagination.limit) {
      setPagination(prev => ({
        ...prev,
        limit: preferences.maxResultsPerPage,
        page: 1,
      }));
    }
  }, [preferences?.maxResultsPerPage]);

  // Fetch vulnerabilities
  const fetchVulnerabilities = async () => {
    try {
      setLoading(true);
      setError(null);

      const params = new URLSearchParams({
        page: pagination.page.toString(),
        limit: pagination.limit.toString(),
      });

      if (searchTerm) params.append('search', searchTerm);
      if (severityFilter !== 'all') params.append('severity', severityFilter);

      const response = await apiClient.get<VulnerabilityListResponse>(`/api/admin/vulnerabilities?${params}`);
      
      if (response.success) {
        setVulnerabilities(response.data);
        setPagination(response.pagination);
      } else {
        throw new Error('Failed to fetch vulnerabilities');
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to fetch vulnerabilities');
      toast({
        title: 'Error',
        description: 'Failed to fetch vulnerabilities',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  // Fetch analytics
  const fetchAnalytics = async () => {
    try {
      setAnalyticsLoading(true);
      const response = await apiClient.get<{ success: boolean; data: AdminVulnerabilityStats }>('/api/admin/vulnerabilities/analytics');
      
      if (response.success) {
        setAnalytics(response.data);
      }
    } catch (err) {
      console.error('Failed to fetch analytics:', err);
    } finally {
      setAnalyticsLoading(false);
    }
  };

  // Load data on component mount
  useEffect(() => {
    if (hasPermission('vulnerability_management')) {
      fetchVulnerabilities();
      fetchAnalytics();
    }
  }, [hasPermission, pagination.page, searchTerm, severityFilter]);

  // Handle search
  const handleSearch = (value: string) => {
    setSearchTerm(value);
    setPagination(prev => ({ ...prev, page: 1 }));
  };

  // Handle severity filter
  const handleSeverityFilter = (value: string) => {
    setSeverityFilter(value);
    setPagination(prev => ({ ...prev, page: 1 }));
  };

  // Handle create vulnerability
  const handleCreateVulnerability = async () => {
    try {
      setFormLoading(true);
      
      const response = await apiClient.post('/api/admin/vulnerabilities', formData);
      
      if (response.success) {
        toast({
          title: 'Success',
          description: 'Vulnerability created successfully',
        });
        setShowForm(false);
        setFormData({});
        fetchVulnerabilities();
        fetchAnalytics();
      } else {
        throw new Error(response.error || 'Failed to create vulnerability');
      }
    } catch (err) {
      toast({
        title: 'Error',
        description: err instanceof Error ? err.message : 'Failed to create vulnerability',
        variant: 'destructive',
      });
    } finally {
      setFormLoading(false);
    }
  };

  // Handle update vulnerability
  const handleUpdateVulnerability = async () => {
    if (!editingVulnerability) return;

    try {
      setFormLoading(true);
      
      const response = await apiClient.put(`/api/admin/vulnerabilities/${editingVulnerability.cveId}`, formData);
      
      if (response.success) {
        toast({
          title: 'Success',
          description: 'Vulnerability updated successfully',
        });
        setShowForm(false);
        setEditingVulnerability(null);
        setFormData({});
        fetchVulnerabilities();
        fetchAnalytics();
      } else {
        throw new Error(response.error || 'Failed to update vulnerability');
      }
    } catch (err) {
      toast({
        title: 'Error',
        description: err instanceof Error ? err.message : 'Failed to update vulnerability',
        variant: 'destructive',
      });
    } finally {
      setFormLoading(false);
    }
  };

  // Handle delete vulnerability
  const handleDeleteVulnerability = async (cveId: string) => {
    if (!confirm(`Are you sure you want to delete vulnerability ${cveId}?`)) return;

    try {
      const response = await apiClient.delete(`/api/admin/vulnerabilities/${cveId}`);
      
      if (response.success) {
        toast({
          title: 'Success',
          description: 'Vulnerability deleted successfully',
        });
        fetchVulnerabilities();
        fetchAnalytics();
      } else {
        throw new Error(response.error || 'Failed to delete vulnerability');
      }
    } catch (err) {
      toast({
        title: 'Error',
        description: err instanceof Error ? err.message : 'Failed to delete vulnerability',
        variant: 'destructive',
      });
    }
  };

  // Handle export
  const handleExport = async (format: 'json' | 'csv' | 'xml') => {
    try {
      const response = await apiClient.post('/api/admin/vulnerabilities/export', {
        format,
        filters: {
          severity: severityFilter !== 'all' ? [severityFilter] : undefined,
        },
      });

      // Create download link
      const blob = new Blob([response], { type: 'application/octet-stream' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `vulnerabilities-export.${format}`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);

      toast({
        title: 'Success',
        description: `Vulnerabilities exported as ${format.toUpperCase()}`,
      });
    } catch (err) {
      toast({
        title: 'Error',
        description: 'Failed to export vulnerabilities',
        variant: 'destructive',
      });
    }
  };


  if (!hasPermission('vulnerability_management')) {
    return (
      <Alert>
        <XCircle className="h-4 w-4" />
        <AlertDescription>
          You don't have permission to access vulnerability management.
        </AlertDescription>
      </Alert>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold tracking-tight">Vulnerability Management</h2>
          <p className="text-muted-foreground">
            Manage vulnerabilities, import/export data, and view analytics
          </p>
        </div>
        <div className="flex items-center space-x-2">
          {hasPermission('vulnerability_export') && (
            <Button
              variant="outline"
              size="sm"
              onClick={() => handleExport('json')}
              disabled={loading}
            >
              <Download className="h-4 w-4 mr-2" />
              Export JSON
            </Button>
          )}
          {hasPermission('vulnerability_management') && (
            <Button
              onClick={() => {
                setEditingVulnerability(null);
                setFormData({});
                setShowForm(true);
              }}
            >
              <Plus className="h-4 w-4 mr-2" />
              Add Vulnerability
            </Button>
          )}
        </div>
      </div>

      {/* Analytics Cards */}
      {analytics && (
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Vulnerabilities</CardTitle>
              <Database className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{analytics.total}</div>
              <p className="text-xs text-muted-foreground">
                {analytics.recentlyPublished} published in last 30 days
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Critical Vulnerabilities</CardTitle>
              <AlertTriangle className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-red-600">{analytics.bySeverity.CRITICAL || 0}</div>
              <p className="text-xs text-muted-foreground">
                {analytics.withExploits} with known exploits
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Data Quality</CardTitle>
              <Shield className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{analytics.dataQuality.completeness.toFixed(1)}%</div>
              <p className="text-xs text-muted-foreground">
                {analytics.dataQuality.duplicates} duplicates found
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Trending</CardTitle>
              <TrendingUp className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{analytics.trending}</div>
              <p className="text-xs text-muted-foreground">
                Currently trending vulnerabilities
              </p>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Main Content */}
      <Tabs defaultValue="list" className="space-y-4">
        <TabsList>
          <TabsTrigger value="list">Vulnerabilities</TabsTrigger>
          {hasPermission('vulnerability_analytics') && (
            <TabsTrigger value="analytics">Analytics</TabsTrigger>
          )}
          {hasPermission('vulnerability_import') && (
            <TabsTrigger value="import">Import</TabsTrigger>
          )}
        </TabsList>

        <TabsContent value="list" className="space-y-4">
          {/* Filters */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Filters</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex flex-col sm:flex-row gap-4">
                <div className="flex-1">
                  <Label htmlFor="search">Search</Label>
                  <div className="relative">
                    <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                    <Input
                      id="search"
                      placeholder="Search by CVE ID, title, or description..."
                      value={searchTerm}
                      onChange={(e) => handleSearch(e.target.value)}
                      className="pl-10"
                    />
                  </div>
                </div>
                <div className="sm:w-48">
                  <Label htmlFor="severity">Severity</Label>
                  <Select value={severityFilter} onValueChange={handleSeverityFilter}>
                    <SelectTrigger>
                      <SelectValue placeholder="All severities" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Severities</SelectItem>
                      <SelectItem value="CRITICAL">Critical</SelectItem>
                      <SelectItem value="HIGH">High</SelectItem>
                      <SelectItem value="MEDIUM">Medium</SelectItem>
                      <SelectItem value="LOW">Low</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="flex items-end">
                  <Button
                    variant="outline"
                    onClick={fetchVulnerabilities}
                    disabled={loading}
                  >
                    <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
                    Refresh
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Vulnerabilities List */}
          <Card className={`${getHighContrastClass()}`}>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span>Vulnerabilities</span>
                <div className="flex items-center space-x-2">
                  <Badge variant="outline">
                    {pagination.total} total
                  </Badge>
                  <div className="flex items-center space-x-1">
                    <Button
                      variant={viewMode === 'table' ? 'default' : 'outline'}
                      size="sm"
                      onClick={() => setViewMode('table')}
                    >
                      <List className="h-4 w-4" />
                    </Button>
                    <Button
                      variant={viewMode === 'cards' ? 'default' : 'outline'}
                      size="sm"
                      onClick={() => setViewMode('cards')}
                    >
                      <Grid3X3 className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent>
              {loading ? (
                <div className="flex items-center justify-center py-8">
                  <Loader2 className="h-8 w-8 animate-spin" />
                </div>
              ) : error ? (
                <Alert variant="destructive">
                  <XCircle className="h-4 w-4" />
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              ) : vulnerabilities.length === 0 ? (
                <div className="text-center py-8">
                  <Database className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                  <h3 className="text-lg font-semibold">No vulnerabilities found</h3>
                  <p className="text-muted-foreground">
                    {searchTerm || severityFilter !== 'all' 
                      ? 'Try adjusting your filters' 
                      : 'Get started by adding your first vulnerability'}
                  </p>
                </div>
              ) : (
                <>
                  {viewMode === 'table' ? (
                    <div className="overflow-x-auto">
                      <table className="w-full">
                        <thead>
                          <tr className="border-b">
                            <th className="text-left p-3 font-medium">CVE ID</th>
                            <th className="text-left p-3 font-medium">Title</th>
                            <th className="text-left p-3 font-medium">Severity</th>
                            <th className="text-left p-3 font-medium">CVSS</th>
                            <th className="text-left p-3 font-medium">Published</th>
                            <th className="text-left p-3 font-medium">Actions</th>
                          </tr>
                        </thead>
                        <tbody>
                          {vulnerabilities.map((vuln) => (
                            <tr key={vuln.cveId} className={`border-b hover:bg-muted/50 ${getAnimationClass()}`}>
                              <td className="p-3">
                                <div className="flex items-center space-x-2">
                                  <span className="font-mono text-sm font-medium">{vuln.cveId}</span>
                                  {vuln.kev && <Badge variant="destructive" className="text-xs">KEV</Badge>}
                                  {vuln.trending && <Badge variant="default" className="text-xs">Trending</Badge>}
                                </div>
                              </td>
                              <td className="p-3">
                                <p className="text-sm line-clamp-2 max-w-xs">{vuln.title}</p>
                              </td>
                              <td className="p-3">
                                <Badge variant={getSeverityBadgeVariant(vuln.severity)} className="text-xs">
                                  {vuln.severity}
                                </Badge>
                              </td>
                              <td className="p-3">
                                <span className="text-sm font-medium">{vuln.cvssScore}</span>
                              </td>
                              <td className="p-3">
                                <span className="text-sm text-muted-foreground">
                                  {new Date(vuln.publishedDate).toLocaleDateString()}
                                </span>
                              </td>
                              <td className="p-3">
                                <div className="flex items-center space-x-1">
                                  <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() => {
                                      setEditingVulnerability(vuln);
                                      const { _id, ...formData } = vuln as any;
                                      setFormData(formData);
                                      setShowForm(true);
                                    }}
                                  >
                                    <Edit className="h-4 w-4" />
                                  </Button>
                                  <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() => handleDeleteVulnerability(vuln.cveId)}
                                  >
                                    <Trash2 className="h-4 w-4" />
                                  </Button>
                                </div>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  ) : (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                      {vulnerabilities.map((vuln) => (
                        <Card key={vuln.cveId} className={`hover:shadow-md ${getAnimationClass()}`}>
                          <CardContent className="p-4">
                            <div className="flex items-start justify-between mb-2">
                              <span className="font-mono text-sm font-medium">{vuln.cveId}</span>
                              <div className="flex items-center space-x-1">
                                <Badge variant={getSeverityBadgeVariant(vuln.severity)} className="text-xs">
                                  {vuln.severity}
                                </Badge>
                                {vuln.kev && <Badge variant="destructive" className="text-xs">KEV</Badge>}
                                {vuln.trending && <Badge variant="default" className="text-xs">Trending</Badge>}
                              </div>
                            </div>
                            <h3 className="font-medium text-sm mb-2 line-clamp-2">{vuln.title}</h3>
                            <div className="flex items-center justify-between text-xs text-muted-foreground mb-3">
                              <span>CVSS {vuln.cvssScore}</span>
                              <span>{new Date(vuln.publishedDate).toLocaleDateString()}</span>
                            </div>
                            <div className="flex items-center space-x-1">
                              <Button
                                variant="outline"
                                size="sm"
                                className="flex-1"
                                onClick={() => {
                                  setEditingVulnerability(vuln);
                                  const { _id, ...formData } = vuln as any;
                                  setFormData(formData);
                                  setShowForm(true);
                                }}
                              >
                                <Edit className="h-4 w-4 mr-1" />
                                Edit
                              </Button>
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => handleDeleteVulnerability(vuln.cveId)}
                              >
                                <Trash2 className="h-4 w-4" />
                              </Button>
                            </div>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  )}
                  
                  {/* Pagination Controls */}
                  {pagination.pages > 1 && (
                    <div className="mt-6 pt-4 border-t">
                      <div className="flex flex-col sm:flex-row items-center justify-between space-y-4 sm:space-y-0">
                        <div className="flex items-center space-x-4 text-sm text-muted-foreground">
                          <span>
                            Showing {((pagination.page - 1) * pagination.limit) + 1}-{Math.min(pagination.page * pagination.limit, pagination.total)} of{' '}
                            {pagination.total.toLocaleString()} vulnerabilities
                          </span>
                          <Select value={pagination.limit.toString()} onValueChange={(value) => handleLimitChange(Number(value))}>
                            <SelectTrigger className="w-20">
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="10">10</SelectItem>
                              <SelectItem value="25">25</SelectItem>
                              <SelectItem value="50">50</SelectItem>
                              <SelectItem value="100">100</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                        
                        <div className="flex items-center space-x-2">
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => handlePageChange(1)}
                            disabled={pagination.page === 1}
                          >
                            <ChevronsLeft className="h-4 w-4" />
                          </Button>
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => handlePageChange(pagination.page - 1)}
                            disabled={pagination.page === 1}
                          >
                            <ChevronLeft className="h-4 w-4" />
                          </Button>
                          
                          <div className="flex items-center space-x-1">
                            {Array.from({ length: Math.min(5, pagination.pages) }, (_, i) => {
                              let pageNum;
                              if (pagination.pages <= 5) {
                                pageNum = i + 1;
                              } else if (pagination.page <= 3) {
                                pageNum = i + 1;
                              } else if (pagination.page >= pagination.pages - 2) {
                                pageNum = pagination.pages - 4 + i;
                              } else {
                                pageNum = pagination.page - 2 + i;
                              }
                              
                              return (
                                <Button
                                  key={pageNum}
                                  variant={pageNum === pagination.page ? 'default' : 'outline'}
                                  size="sm"
                                  onClick={() => handlePageChange(pageNum)}
                                  className="w-8 h-8 p-0"
                                >
                                  {pageNum}
                                </Button>
                              );
                            })}
                          </div>
                          
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => handlePageChange(pagination.page + 1)}
                            disabled={pagination.page === pagination.pages}
                          >
                            <ChevronRight className="h-4 w-4" />
                          </Button>
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => handlePageChange(pagination.pages)}
                            disabled={pagination.page === pagination.pages}
                          >
                            <ChevronsRight className="h-4 w-4" />
                          </Button>
                        </div>
                        
                        <div className="text-sm text-muted-foreground">
                          Page {pagination.page} of {pagination.pages}
                        </div>
                      </div>
                    </div>
                  )}
                </>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="analytics" className="space-y-4">
          {analyticsLoading ? (
            <div className="flex items-center justify-center py-8">
              <Loader2 className="h-8 w-8 animate-spin" />
            </div>
          ) : analytics ? (
            <div className="grid gap-4 md:grid-cols-2">
              <Card>
                <CardHeader>
                  <CardTitle>Severity Distribution</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    {Object.entries(analytics.bySeverity).map(([severity, count]) => (
                      <div key={severity} className="flex items-center justify-between">
                        <span className="capitalize">{severity.toLowerCase()}</span>
                        <Badge variant={getSeverityBadgeVariant(severity)}>
                          {count}
                        </Badge>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Data Quality Metrics</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div>
                      <div className="flex items-center justify-between mb-1">
                        <span className="text-sm font-medium">Completeness</span>
                        <span className="text-sm text-muted-foreground">
                          {analytics.dataQuality.completeness.toFixed(1)}%
                        </span>
                      </div>
                      <div className="w-full bg-muted rounded-full h-2">
                        <div
                          className="bg-blue-600 h-2 rounded-full"
                          style={{ width: `${analytics.dataQuality.completeness}%` }}
                        />
                      </div>
                    </div>
                    <div>
                      <div className="flex items-center justify-between mb-1">
                        <span className="text-sm font-medium">Accuracy</span>
                        <span className="text-sm text-muted-foreground">
                          {analytics.dataQuality.accuracy.toFixed(1)}%
                        </span>
                      </div>
                      <div className="w-full bg-muted rounded-full h-2">
                        <div
                          className="bg-green-600 h-2 rounded-full"
                          style={{ width: `${analytics.dataQuality.accuracy}%` }}
                        />
                      </div>
                    </div>
                    <div className="pt-2">
                      <span className="text-sm font-medium">Duplicates: </span>
                      <span className="text-sm text-muted-foreground">
                        {analytics.dataQuality.duplicates}
                      </span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          ) : (
            <Alert>
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>
                Failed to load analytics data.
              </AlertDescription>
            </Alert>
          )}
        </TabsContent>

        <TabsContent value="import" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Import Vulnerabilities</CardTitle>
            </CardHeader>
            <CardContent>
              <Alert>
                <FileText className="h-4 w-4" />
                <AlertDescription>
                  Import functionality will be implemented in the next phase. 
                  This will support JSON, CSV, and XML formats.
                </AlertDescription>
              </Alert>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Create/Edit Form Modal */}
      {showForm && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
          <Card className="w-full max-w-2xl max-h-[90vh] overflow-y-auto">
            <CardHeader>
              <CardTitle>
                {editingVulnerability ? 'Edit Vulnerability' : 'Create New Vulnerability'}
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid gap-4 md:grid-cols-2">
                <div>
                  <Label htmlFor="cveId">CVE ID</Label>
                  <Input
                    id="cveId"
                    value={formData.cveId || ''}
                    onChange={(e) => setFormData({ ...formData, cveId: e.target.value })}
                    placeholder="CVE-2024-0001"
                  />
                </div>
                <div>
                  <Label htmlFor="severity">Severity</Label>
                  <Select
                    value={formData.severity || ''}
                    onValueChange={(value) => setFormData({ ...formData, severity: value as any })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select severity" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="CRITICAL">Critical</SelectItem>
                      <SelectItem value="HIGH">High</SelectItem>
                      <SelectItem value="MEDIUM">Medium</SelectItem>
                      <SelectItem value="LOW">Low</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div>
                <Label htmlFor="title">Title</Label>
                <Input
                  id="title"
                  value={formData.title || ''}
                  onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                  placeholder="Vulnerability title"
                />
              </div>

              <div>
                <Label htmlFor="description">Description</Label>
                <Textarea
                  id="description"
                  value={formData.description || ''}
                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                  placeholder="Detailed vulnerability description"
                  rows={4}
                />
              </div>

              <div className="grid gap-4 md:grid-cols-2">
                <div>
                  <Label htmlFor="cvssScore">CVSS Score</Label>
                  <Input
                    id="cvssScore"
                    type="number"
                    min="0"
                    max="10"
                    step="0.1"
                    value={formData.cvssScore || ''}
                    onChange={(e) => setFormData({ ...formData, cvssScore: parseFloat(e.target.value) })}
                    placeholder="9.8"
                  />
                </div>
                <div>
                  <Label htmlFor="publishedDate">Published Date</Label>
                  <Input
                    id="publishedDate"
                    type="date"
                    value={formData.publishedDate ? new Date(formData.publishedDate).toISOString().split('T')[0] : ''}
                    onChange={(e) => setFormData({ ...formData, publishedDate: e.target.value })}
                  />
                </div>
              </div>

              <div className="flex justify-end space-x-2">
                <Button
                  variant="outline"
                  onClick={() => {
                    setShowForm(false);
                    setEditingVulnerability(null);
                    setFormData({});
                  }}
                >
                  Cancel
                </Button>
                <Button
                  onClick={editingVulnerability ? handleUpdateVulnerability : handleCreateVulnerability}
                  disabled={formLoading}
                >
                  {formLoading && <Loader2 className="h-4 w-4 mr-2 animate-spin" />}
                  {editingVulnerability ? 'Update' : 'Create'}
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
}
