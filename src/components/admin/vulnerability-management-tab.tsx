'use client';

import { useState, useEffect } from 'react';
import { useAdminAuth } from '@/hooks/use-admin-auth';
import { usePreferences } from '@/contexts/preferences-context';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog';
import { Drawer, DrawerContent, DrawerHeader, DrawerTitle, DrawerDescription } from '@/components/ui/drawer';
import { useToast } from '@/hooks/use-toast';
import { apiClient } from '@/lib/api-client';
import type { Vulnerability } from '@/types/vulnerability';
import {
  Database,
  Plus,
  Search,
  Download,
  Upload,
  BarChart3,
  AlertTriangle,
  Shield,
  CheckCircle,
  XCircle,
  Loader2,
  RefreshCw,
  Edit,
  Trash2,
  Eye,
  FileText,
  TrendingUp,
  Activity,
  ChevronLeft,
  ChevronRight,
  ChevronsLeft,
  ChevronsRight,
  Grid3X3,
  List,
} from 'lucide-react';

interface VulnerabilityListResponse {
  success: boolean;
  data: Vulnerability[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    pages: number;
    hasMore: boolean;
  };
}

interface AdminVulnerabilityStats {
  total: number;
  bySeverity: Record<string, number>;
  byCategory: Record<string, number>;
  withExploits: number;
  withPatches: number;
  trending: number;
  recentlyPublished: number;
  dataQuality: {
    completeness: number;
    accuracy: number;
    duplicates: number;
  };
}

export function VulnerabilityManagementTab() {
  const { hasPermission } = useAdminAuth();
  const { preferences } = usePreferences();
  const { toast } = useToast();
  
  // State for vulnerabilities list
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [severityFilter, setSeverityFilter] = useState<string>('all');
  const [viewMode, setViewMode] = useState<'table' | 'cards'>('table');
  const [pagination, setPagination] = useState({
    page: 1,
    limit: preferences?.maxResultsPerPage || 25,
    total: 0,
    pages: 0,
    hasMore: false,
  });

  // State for analytics
  const [analytics, setAnalytics] = useState<AdminVulnerabilityStats | null>(null);
  const [analyticsLoading, setAnalyticsLoading] = useState(false);

  // State for create/edit form
  const [showForm, setShowForm] = useState(false);
  const [editingVulnerability, setEditingVulnerability] = useState<Vulnerability | null>(null);
  const [formData, setFormData] = useState<Partial<Vulnerability>>({});
  const [formLoading, setFormLoading] = useState(false);
  const [formErrors, setFormErrors] = useState<Record<string, string>>({});

  // State for delete confirmation
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [vulnerabilityToDelete, setVulnerabilityToDelete] = useState<Vulnerability | null>(null);
  const [deleteLoading, setDeleteLoading] = useState(false);

  // State for vulnerability drawer
  const [drawerOpen, setDrawerOpen] = useState(false);
  const [selectedVulnerability, setSelectedVulnerability] = useState<Vulnerability | null>(null);

  // State for export
  const [exportLoading, setExportLoading] = useState(false);

  // User preference integration
  const getFontSizeClass = () => {
    switch (preferences?.fontSize) {
      case 'small': return 'text-sm';
      case 'large': return 'text-lg';
      default: return 'text-base';
    }
  };

  const getHighContrastClass = () => {
    return preferences?.highContrast ? 'border-2 border-gray-300 dark:border-gray-600' : '';
  };

  const getAnimationClass = () => {
    return preferences?.reduceMotion ? 'transition-none' : 'transition-colors';
  };

  const getSeverityBadgeVariant = (severity: string) => {
    switch (severity) {
      case 'CRITICAL': return 'destructive';
      case 'HIGH': return 'destructive';
      case 'MEDIUM': return 'default';
      case 'LOW': return 'secondary';
      default: return 'outline';
    }
  };

  // Pagination handlers
  const handlePageChange = (page: number) => {
    setPagination(prev => ({ ...prev, page }));
  };

  const handleLimitChange = (limit: number) => {
    setPagination(prev => ({ ...prev, limit, page: 1 }));
  };

  // Update pagination limit when preferences change
  useEffect(() => {
    if (preferences?.maxResultsPerPage && preferences.maxResultsPerPage !== pagination.limit) {
      setPagination(prev => ({
        ...prev,
        limit: preferences.maxResultsPerPage,
        page: 1,
      }));
    }
  }, [preferences?.maxResultsPerPage]);

  // Fetch vulnerabilities
  const fetchVulnerabilities = async () => {
    try {
      setLoading(true);
      setError(null);

      const params = new URLSearchParams({
        page: pagination.page.toString(),
        limit: pagination.limit.toString(),
      });

      if (searchTerm) params.append('search', searchTerm);
      if (severityFilter !== 'all') params.append('severity', severityFilter);

      const response = await apiClient.get<VulnerabilityListResponse>(`/api/admin/vulnerabilities?${params}`);
      
      if (response.success) {
        setVulnerabilities(response.data);
        setPagination(response.pagination);
      } else {
        throw new Error('Failed to fetch vulnerabilities');
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to fetch vulnerabilities');
      toast({
        title: 'Error',
        description: 'Failed to fetch vulnerabilities',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  // Fetch analytics
  const fetchAnalytics = async () => {
    try {
      setAnalyticsLoading(true);
      const response = await apiClient.get<{ success: boolean; data: AdminVulnerabilityStats }>('/api/admin/vulnerabilities/analytics');
      
      if (response.success) {
        setAnalytics(response.data);
      }
    } catch (err) {
      console.error('Failed to fetch analytics:', err);
    } finally {
      setAnalyticsLoading(false);
    }
  };

  // Load data on component mount
  useEffect(() => {
    if (hasPermission('vulnerability_management')) {
      fetchVulnerabilities();
      fetchAnalytics();
    }
  }, [hasPermission, pagination.page, searchTerm, severityFilter]);

  // Handle search
  const handleSearch = (value: string) => {
    setSearchTerm(value);
    setPagination(prev => ({ ...prev, page: 1 }));
  };

  // Handle severity filter
  const handleSeverityFilter = (value: string) => {
    setSeverityFilter(value);
    setPagination(prev => ({ ...prev, page: 1 }));
  };

  // Form validation
  const validateForm = (): boolean => {
    const errors: Record<string, string> = {};
    
    if (!formData.cveId?.trim()) {
      errors.cveId = 'CVE ID is required';
    } else if (!/^CVE-\d{4}-\d{4,}$/.test(formData.cveId)) {
      errors.cveId = 'CVE ID must be in format CVE-YYYY-NNNN';
    }
    
    if (!formData.title?.trim()) {
      errors.title = 'Title is required';
    }
    
    if (!formData.description?.trim()) {
      errors.description = 'Description is required';
    }
    
    if (!formData.severity) {
      errors.severity = 'Severity is required';
    }
    
    if (formData.cvssScore === undefined || formData.cvssScore < 0 || formData.cvssScore > 10) {
      errors.cvssScore = 'CVSS Score must be between 0 and 10';
    }
    
    if (!formData.publishedDate) {
      errors.publishedDate = 'Published date is required';
    }
    
    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  // Optimistic update for vulnerabilities list
  const updateVulnerabilityInList = (updatedVuln: Vulnerability, isNew: boolean = false) => {
    setVulnerabilities(prev => {
      if (isNew) {
        return [updatedVuln, ...prev];
      } else {
        return prev.map(v => v.cveId === updatedVuln.cveId ? updatedVuln : v);
      }
    });
  };

  const removeVulnerabilityFromList = (cveId: string) => {
    setVulnerabilities(prev => prev.filter(v => v.cveId !== cveId));
    setPagination(prev => ({ ...prev, total: prev.total - 1 }));
  };

  // Handle create vulnerability
  const handleCreateVulnerability = async () => {
    if (!validateForm()) {
      return;
    }

    try {
      setFormLoading(true);
      setFormErrors({});
      
      const response = await apiClient.post('/api/admin/vulnerabilities', formData);
      
      if (response.success) {
        // Optimistic update
        updateVulnerabilityInList(response.data, true);
        
        toast({
          title: 'Success',
          description: 'Vulnerability created successfully',
        });
        
        setShowForm(false);
        setFormData({});
        
        // Only refetch analytics, not the full list
        fetchAnalytics();
      } else {
        throw new Error(response.error || 'Failed to create vulnerability');
      }
    } catch (err) {
      toast({
        title: 'Error',
        description: err instanceof Error ? err.message : 'Failed to create vulnerability',
        variant: 'destructive',
      });
    } finally {
      setFormLoading(false);
    }
  };

  // Handle update vulnerability
  const handleUpdateVulnerability = async () => {
    if (!editingVulnerability) return;

    if (!validateForm()) {
      return;
    }

    try {
      setFormLoading(true);
      setFormErrors({});
      
      const response = await apiClient.put(`/api/admin/vulnerabilities/${editingVulnerability.cveId}`, formData);
      
      if (response.success) {
        // Optimistic update
        updateVulnerabilityInList(response.data);
        
        toast({
          title: 'Success',
          description: 'Vulnerability updated successfully',
        });
        
        setShowForm(false);
        setEditingVulnerability(null);
        setFormData({});
        
        // Only refetch analytics, not the full list
        fetchAnalytics();
      } else {
        throw new Error(response.error || 'Failed to update vulnerability');
      }
    } catch (err) {
      toast({
        title: 'Error',
        description: err instanceof Error ? err.message : 'Failed to update vulnerability',
        variant: 'destructive',
      });
    } finally {
      setFormLoading(false);
    }
  };

  // Handle delete vulnerability
  const handleDeleteVulnerability = async (vulnerability: Vulnerability) => {
    setVulnerabilityToDelete(vulnerability);
    setDeleteDialogOpen(true);
  };

  const confirmDelete = async () => {
    if (!vulnerabilityToDelete) return;

    try {
      setDeleteLoading(true);
      
      const response = await apiClient.delete(`/api/admin/vulnerabilities/${vulnerabilityToDelete.cveId}`);
      
      if (response.success) {
        // Optimistic update
        removeVulnerabilityFromList(vulnerabilityToDelete.cveId);
        
        toast({
          title: 'Success',
          description: 'Vulnerability deleted successfully',
        });
        
        setDeleteDialogOpen(false);
        setVulnerabilityToDelete(null);
        
        // Only refetch analytics, not the full list
        fetchAnalytics();
      } else {
        throw new Error(response.error || 'Failed to delete vulnerability');
      }
    } catch (err) {
      toast({
        title: 'Error',
        description: err instanceof Error ? err.message : 'Failed to delete vulnerability',
        variant: 'destructive',
      });
    } finally {
      setDeleteLoading(false);
    }
  };

  // Handle export with user preferences
  const handleExport = async (format?: 'json' | 'csv' | 'xml' | 'pdf') => {
    const exportFormat = format || preferences?.exportFormat || 'csv';
    
    try {
      setExportLoading(true);
      
      // Use fetch directly to handle binary responses properly
      const response = await fetch('/api/admin/vulnerabilities/export', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          format: exportFormat,
          filters: {
            severity: severityFilter !== 'all' ? [severityFilter] : undefined,
            search: searchTerm || undefined,
          },
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to export vulnerabilities');
      }

      // Get the blob from the response
      const blob = await response.blob();
      
      // Create download link with proper MIME type
      let mimeType = 'application/octet-stream';
      let fileExtension = exportFormat;
      
      switch (exportFormat) {
        case 'json':
          mimeType = 'application/json';
          break;
        case 'csv':
          mimeType = 'text/csv';
          break;
        case 'xml':
          mimeType = 'application/xml';
          break;
        case 'pdf':
          mimeType = 'application/pdf';
          break;
      }

      // Create a new blob with the correct MIME type
      const typedBlob = new Blob([blob], { type: mimeType });
      const url = window.URL.createObjectURL(typedBlob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `vulnerabilities-export-${new Date().toISOString().split('T')[0]}.${fileExtension}`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);

      toast({
        title: 'Success',
        description: `Vulnerabilities exported as ${exportFormat.toUpperCase()}`,
      });
    } catch (err) {
      console.error('Export error:', err);
      toast({
        title: 'Error',
        description: err instanceof Error ? err.message : 'Failed to export vulnerabilities',
        variant: 'destructive',
      });
    } finally {
      setExportLoading(false);
    }
  };


  if (!hasPermission('vulnerability_management')) {
    return (
      <Alert>
        <XCircle className="h-4 w-4" />
        <AlertDescription>
          You don't have permission to access vulnerability management.
        </AlertDescription>
      </Alert>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold tracking-tight">Vulnerability Management</h2>
          <p className="text-muted-foreground">
            Manage vulnerabilities, import/export data, and view analytics
          </p>
        </div>
        <div className="flex items-center space-x-2">
          {hasPermission('vulnerability_export') && (
            <div className="flex items-center space-x-2">
              <Select
                value={preferences?.exportFormat || 'csv'}
                onValueChange={(value) => {
                  // Update user preference for export format
                  if (preferences) {
                    // This would typically update the user's preferences
                    console.log('Export format changed to:', value);
                  }
                }}
              >
                <SelectTrigger className="w-24">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="csv">CSV</SelectItem>
                  <SelectItem value="json">JSON</SelectItem>
                  <SelectItem value="xml">XML</SelectItem>
                  <SelectItem value="pdf">PDF</SelectItem>
                </SelectContent>
              </Select>
              <Button
                variant="outline"
                size="sm"
                onClick={() => handleExport()}
                disabled={exportLoading}
              >
                {exportLoading ? (
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                ) : (
                  <Download className="h-4 w-4 mr-2" />
                )}
                Export
              </Button>
            </div>
          )}
          {hasPermission('vulnerability_management') && (
            <Button
              onClick={() => {
                setEditingVulnerability(null);
                setFormData({});
                setFormErrors({});
                setShowForm(true);
              }}
            >
              <Plus className="h-4 w-4 mr-2" />
              Add Vulnerability
            </Button>
          )}
        </div>
      </div>

      {/* Analytics Cards */}
      {analytics && (
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Vulnerabilities</CardTitle>
              <Database className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{analytics.total}</div>
              <p className="text-xs text-muted-foreground">
                {analytics.recentlyPublished} published in last 30 days
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Critical Vulnerabilities</CardTitle>
              <AlertTriangle className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-red-600">{analytics.bySeverity.CRITICAL || 0}</div>
              <p className="text-xs text-muted-foreground">
                {analytics.withExploits} with known exploits
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Data Quality</CardTitle>
              <Shield className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{analytics.dataQuality.completeness.toFixed(1)}%</div>
              <p className="text-xs text-muted-foreground">
                {analytics.dataQuality.duplicates} duplicates found
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Trending</CardTitle>
              <TrendingUp className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{analytics.trending}</div>
              <p className="text-xs text-muted-foreground">
                Currently trending vulnerabilities
              </p>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Main Content */}
      <Tabs defaultValue="list" className="space-y-4">
        <TabsList>
          <TabsTrigger value="list">Vulnerabilities</TabsTrigger>
          {hasPermission('vulnerability_analytics') && (
            <TabsTrigger value="analytics">Analytics</TabsTrigger>
          )}
          {hasPermission('vulnerability_import') && (
            <TabsTrigger value="import">Import</TabsTrigger>
          )}
        </TabsList>

        <TabsContent value="list" className="space-y-4">
          {/* Filters */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Filters</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex flex-col sm:flex-row gap-4">
                <div className="flex-1">
                  <Label htmlFor="search">Search</Label>
                  <div className="relative">
                    <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                    <Input
                      id="search"
                      placeholder="Search by CVE ID, title, or description..."
                      value={searchTerm}
                      onChange={(e) => handleSearch(e.target.value)}
                      className="pl-10"
                    />
                  </div>
                </div>
                <div className="sm:w-48">
                  <Label htmlFor="severity">Severity</Label>
                  <Select value={severityFilter} onValueChange={handleSeverityFilter}>
                    <SelectTrigger>
                      <SelectValue placeholder="All severities" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Severities</SelectItem>
                      <SelectItem value="CRITICAL">Critical</SelectItem>
                      <SelectItem value="HIGH">High</SelectItem>
                      <SelectItem value="MEDIUM">Medium</SelectItem>
                      <SelectItem value="LOW">Low</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="flex items-end">
                  <Button
                    variant="outline"
                    onClick={fetchVulnerabilities}
                    disabled={loading}
                  >
                    <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
                    Refresh
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Vulnerabilities List */}
          <Card className={`${getHighContrastClass()}`}>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span>Vulnerabilities</span>
                <div className="flex items-center space-x-2">
                  <Badge variant="outline">
                    {pagination.total} total
                  </Badge>
                  <div className="flex items-center space-x-1">
                    <Button
                      variant={viewMode === 'table' ? 'default' : 'outline'}
                      size="sm"
                      onClick={() => setViewMode('table')}
                    >
                      <List className="h-4 w-4" />
                    </Button>
                    <Button
                      variant={viewMode === 'cards' ? 'default' : 'outline'}
                      size="sm"
                      onClick={() => setViewMode('cards')}
                    >
                      <Grid3X3 className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent>
              {loading ? (
                <div className="flex items-center justify-center py-8">
                  <Loader2 className="h-8 w-8 animate-spin" />
                </div>
              ) : error ? (
                <Alert variant="destructive">
                  <XCircle className="h-4 w-4" />
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              ) : vulnerabilities.length === 0 ? (
                <div className="text-center py-8">
                  <Database className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                  <h3 className="text-lg font-semibold">No vulnerabilities found</h3>
                  <p className="text-muted-foreground">
                    {searchTerm || severityFilter !== 'all' 
                      ? 'Try adjusting your filters' 
                      : 'Get started by adding your first vulnerability'}
                  </p>
                </div>
              ) : (
                <>
                  {viewMode === 'table' ? (
                    <div className="overflow-x-auto">
                      <table className="w-full">
                        <thead>
                          <tr className="border-b">
                            <th className="text-left p-3 font-medium">CVE ID</th>
                            <th className="text-left p-3 font-medium">Title</th>
                            <th className="text-left p-3 font-medium">Severity</th>
                            <th className="text-left p-3 font-medium">CVSS</th>
                            <th className="text-left p-3 font-medium">Published</th>
                            <th className="text-left p-3 font-medium">Actions</th>
                          </tr>
                        </thead>
                        <tbody>
                          {vulnerabilities.map((vuln) => (
                            <tr key={vuln.cveId} className={`border-b hover:bg-muted/50 ${getAnimationClass()}`}>
                              <td className="p-3">
                                <div className="flex items-center space-x-2">
                                  <span className="font-mono text-sm font-medium">{vuln.cveId}</span>
                                  {vuln.kev && <Badge variant="destructive" className="text-xs">KEV</Badge>}
                                  {vuln.trending && <Badge variant="default" className="text-xs">Trending</Badge>}
                                </div>
                              </td>
                              <td className="p-3">
                                <p className="text-sm line-clamp-2 max-w-xs">{vuln.title}</p>
                              </td>
                              <td className="p-3">
                                <Badge variant={getSeverityBadgeVariant(vuln.severity)} className="text-xs">
                                  {vuln.severity}
                                </Badge>
                              </td>
                              <td className="p-3">
                                <span className="text-sm font-medium">{vuln.cvssScore}</span>
                              </td>
                              <td className="p-3">
                                <span className="text-sm text-muted-foreground">
                                  {new Date(vuln.publishedDate).toLocaleDateString()}
                                </span>
                              </td>
                              <td className="p-3">
                                <div className="flex items-center space-x-1">
                                  <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() => {
                                      setSelectedVulnerability(vuln);
                                      setDrawerOpen(true);
                                    }}
                                    title="View details"
                                  >
                                    <Eye className="h-4 w-4" />
                                  </Button>
                                  <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() => {
                                      setEditingVulnerability(vuln);
                                      const { _id, ...formData } = vuln as any;
                                      setFormData(formData);
                                      setFormErrors({});
                                      setShowForm(true);
                                    }}
                                    title="Edit vulnerability"
                                  >
                                    <Edit className="h-4 w-4" />
                                  </Button>
                                  <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() => handleDeleteVulnerability(vuln)}
                                    title="Delete vulnerability"
                                  >
                                    <Trash2 className="h-4 w-4" />
                                  </Button>
                                </div>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  ) : (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                      {vulnerabilities.map((vuln) => (
                        <Card key={vuln.cveId} className={`hover:shadow-md ${getAnimationClass()}`}>
                          <CardContent className="p-4">
                            <div className="flex items-start justify-between mb-2">
                              <span className="font-mono text-sm font-medium">{vuln.cveId}</span>
                              <div className="flex items-center space-x-1">
                                <Badge variant={getSeverityBadgeVariant(vuln.severity)} className="text-xs">
                                  {vuln.severity}
                                </Badge>
                                {vuln.kev && <Badge variant="destructive" className="text-xs">KEV</Badge>}
                                {vuln.trending && <Badge variant="default" className="text-xs">Trending</Badge>}
                              </div>
                            </div>
                            <h3 className="font-medium text-sm mb-2 line-clamp-2">{vuln.title}</h3>
                            <div className="flex items-center justify-between text-xs text-muted-foreground mb-3">
                              <span>CVSS {vuln.cvssScore}</span>
                              <span>{new Date(vuln.publishedDate).toLocaleDateString()}</span>
                            </div>
                            <div className="flex items-center space-x-1">
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => {
                                  setSelectedVulnerability(vuln);
                                  setDrawerOpen(true);
                                }}
                                title="View details"
                              >
                                <Eye className="h-4 w-4" />
                              </Button>
                              <Button
                                variant="outline"
                                size="sm"
                                className="flex-1"
                                onClick={() => {
                                  setEditingVulnerability(vuln);
                                  const { _id, ...formData } = vuln as any;
                                  setFormData(formData);
                                  setFormErrors({});
                                  setShowForm(true);
                                }}
                                title="Edit vulnerability"
                              >
                                <Edit className="h-4 w-4 mr-1" />
                                Edit
                              </Button>
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => handleDeleteVulnerability(vuln)}
                                title="Delete vulnerability"
                              >
                                <Trash2 className="h-4 w-4" />
                              </Button>
                            </div>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  )}
                  
                  {/* Pagination Controls */}
                  {pagination.pages > 1 && (
                    <div className="mt-6 pt-4 border-t">
                      <div className="flex flex-col sm:flex-row items-center justify-between space-y-4 sm:space-y-0">
                        <div className="flex items-center space-x-4 text-sm text-muted-foreground">
                          <span>
                            Showing {((pagination.page - 1) * pagination.limit) + 1}-{Math.min(pagination.page * pagination.limit, pagination.total)} of{' '}
                            {pagination.total.toLocaleString()} vulnerabilities
                          </span>
                          <Select value={pagination.limit.toString()} onValueChange={(value) => handleLimitChange(Number(value))}>
                            <SelectTrigger className="w-20">
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="10">10</SelectItem>
                              <SelectItem value="25">25</SelectItem>
                              <SelectItem value="50">50</SelectItem>
                              <SelectItem value="100">100</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                        
                        <div className="flex items-center space-x-2">
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => handlePageChange(1)}
                            disabled={pagination.page === 1}
                          >
                            <ChevronsLeft className="h-4 w-4" />
                          </Button>
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => handlePageChange(pagination.page - 1)}
                            disabled={pagination.page === 1}
                          >
                            <ChevronLeft className="h-4 w-4" />
                          </Button>
                          
                          <div className="flex items-center space-x-1">
                            {Array.from({ length: Math.min(5, pagination.pages) }, (_, i) => {
                              let pageNum;
                              if (pagination.pages <= 5) {
                                pageNum = i + 1;
                              } else if (pagination.page <= 3) {
                                pageNum = i + 1;
                              } else if (pagination.page >= pagination.pages - 2) {
                                pageNum = pagination.pages - 4 + i;
                              } else {
                                pageNum = pagination.page - 2 + i;
                              }
                              
                              return (
                                <Button
                                  key={pageNum}
                                  variant={pageNum === pagination.page ? 'default' : 'outline'}
                                  size="sm"
                                  onClick={() => handlePageChange(pageNum)}
                                  className="w-8 h-8 p-0"
                                >
                                  {pageNum}
                                </Button>
                              );
                            })}
                          </div>
                          
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => handlePageChange(pagination.page + 1)}
                            disabled={pagination.page === pagination.pages}
                          >
                            <ChevronRight className="h-4 w-4" />
                          </Button>
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => handlePageChange(pagination.pages)}
                            disabled={pagination.page === pagination.pages}
                          >
                            <ChevronsRight className="h-4 w-4" />
                          </Button>
                        </div>
                        
                        <div className="text-sm text-muted-foreground">
                          Page {pagination.page} of {pagination.pages}
                        </div>
                      </div>
                    </div>
                  )}
                </>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="analytics" className="space-y-4">
          {analyticsLoading ? (
            <div className="flex items-center justify-center py-8">
              <Loader2 className="h-8 w-8 animate-spin" />
            </div>
          ) : analytics ? (
            <div className="grid gap-4 md:grid-cols-2">
              <Card>
                <CardHeader>
                  <CardTitle>Severity Distribution</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    {Object.entries(analytics.bySeverity).map(([severity, count]) => (
                      <div key={severity} className="flex items-center justify-between">
                        <span className="capitalize">{severity.toLowerCase()}</span>
                        <Badge variant={getSeverityBadgeVariant(severity)}>
                          {count}
                        </Badge>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Data Quality Metrics</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div>
                      <div className="flex items-center justify-between mb-1">
                        <span className="text-sm font-medium">Completeness</span>
                        <span className="text-sm text-muted-foreground">
                          {analytics.dataQuality.completeness.toFixed(1)}%
                        </span>
                      </div>
                      <div className="w-full bg-muted rounded-full h-2">
                        <div
                          className="bg-blue-600 h-2 rounded-full"
                          style={{ width: `${analytics.dataQuality.completeness}%` }}
                        />
                      </div>
                    </div>
                    <div>
                      <div className="flex items-center justify-between mb-1">
                        <span className="text-sm font-medium">Accuracy</span>
                        <span className="text-sm text-muted-foreground">
                          {analytics.dataQuality.accuracy.toFixed(1)}%
                        </span>
                      </div>
                      <div className="w-full bg-muted rounded-full h-2">
                        <div
                          className="bg-green-600 h-2 rounded-full"
                          style={{ width: `${analytics.dataQuality.accuracy}%` }}
                        />
                      </div>
                    </div>
                    <div className="pt-2">
                      <span className="text-sm font-medium">Duplicates: </span>
                      <span className="text-sm text-muted-foreground">
                        {analytics.dataQuality.duplicates}
                      </span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          ) : (
            <Alert>
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>
                Failed to load analytics data.
              </AlertDescription>
            </Alert>
          )}
        </TabsContent>

        <TabsContent value="import" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Import Vulnerabilities</CardTitle>
            </CardHeader>
            <CardContent>
              <Alert>
                <FileText className="h-4 w-4" />
                <AlertDescription>
                  Import functionality will be implemented in the next phase. 
                  This will support JSON, CSV, and XML formats.
                </AlertDescription>
              </Alert>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Professional Create/Edit Form Dialog */}
      <Dialog open={showForm} onOpenChange={setShowForm}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              {editingVulnerability ? (
                <>
                  <Edit className="h-5 w-5" />
                  Edit Vulnerability: {editingVulnerability.cveId}
                </>
              ) : (
                <>
                  <Plus className="h-5 w-5" />
                  Create New Vulnerability
                </>
              )}
            </DialogTitle>
          </DialogHeader>
          
          <div className="space-y-6">
            {/* Basic Information Section */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold border-b pb-2">Basic Information</h3>
              
              <div className="grid gap-4 md:grid-cols-2">
                <div>
                  <Label htmlFor="cveId">CVE ID *</Label>
                  <Input
                    id="cveId"
                    value={formData.cveId || ''}
                    onChange={(e) => {
                      setFormData({ ...formData, cveId: e.target.value });
                      if (formErrors.cveId) {
                        setFormErrors({ ...formErrors, cveId: '' });
                      }
                    }}
                    placeholder="CVE-2024-0001"
                    className={formErrors.cveId ? 'border-red-500' : ''}
                  />
                  {formErrors.cveId && (
                    <p className="text-sm text-red-500 mt-1">{formErrors.cveId}</p>
                  )}
                </div>
                <div>
                  <Label htmlFor="severity">Severity *</Label>
                  <Select
                    value={formData.severity || ''}
                    onValueChange={(value) => {
                      setFormData({ ...formData, severity: value as any });
                      if (formErrors.severity) {
                        setFormErrors({ ...formErrors, severity: '' });
                      }
                    }}
                  >
                    <SelectTrigger className={formErrors.severity ? 'border-red-500' : ''}>
                      <SelectValue placeholder="Select severity" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="CRITICAL">Critical</SelectItem>
                      <SelectItem value="HIGH">High</SelectItem>
                      <SelectItem value="MEDIUM">Medium</SelectItem>
                      <SelectItem value="LOW">Low</SelectItem>
                    </SelectContent>
                  </Select>
                  {formErrors.severity && (
                    <p className="text-sm text-red-500 mt-1">{formErrors.severity}</p>
                  )}
                </div>
              </div>

              <div>
                <Label htmlFor="title">Title *</Label>
                <Input
                  id="title"
                  value={formData.title || ''}
                  onChange={(e) => {
                    setFormData({ ...formData, title: e.target.value });
                    if (formErrors.title) {
                      setFormErrors({ ...formErrors, title: '' });
                    }
                  }}
                  placeholder="Vulnerability title"
                  className={formErrors.title ? 'border-red-500' : ''}
                />
                {formErrors.title && (
                  <p className="text-sm text-red-500 mt-1">{formErrors.title}</p>
                )}
              </div>

              <div>
                <Label htmlFor="description">Description *</Label>
                <Textarea
                  id="description"
                  value={formData.description || ''}
                  onChange={(e) => {
                    setFormData({ ...formData, description: e.target.value });
                    if (formErrors.description) {
                      setFormErrors({ ...formErrors, description: '' });
                    }
                  }}
                  placeholder="Detailed vulnerability description"
                  rows={4}
                  className={formErrors.description ? 'border-red-500' : ''}
                />
                {formErrors.description && (
                  <p className="text-sm text-red-500 mt-1">{formErrors.description}</p>
                )}
              </div>

              <div className="grid gap-4 md:grid-cols-2">
                <div>
                  <Label htmlFor="cvssScore">CVSS Score *</Label>
                  <Input
                    id="cvssScore"
                    type="number"
                    min="0"
                    max="10"
                    step="0.1"
                    value={formData.cvssScore || ''}
                    onChange={(e) => {
                      setFormData({ ...formData, cvssScore: parseFloat(e.target.value) });
                      if (formErrors.cvssScore) {
                        setFormErrors({ ...formErrors, cvssScore: '' });
                      }
                    }}
                    placeholder="9.8"
                    className={formErrors.cvssScore ? 'border-red-500' : ''}
                  />
                  {formErrors.cvssScore && (
                    <p className="text-sm text-red-500 mt-1">{formErrors.cvssScore}</p>
                  )}
                </div>
                <div>
                  <Label htmlFor="publishedDate">Published Date *</Label>
                  <Input
                    id="publishedDate"
                    type="date"
                    value={formData.publishedDate ? new Date(formData.publishedDate).toISOString().split('T')[0] : ''}
                    onChange={(e) => {
                      setFormData({ ...formData, publishedDate: e.target.value });
                      if (formErrors.publishedDate) {
                        setFormErrors({ ...formErrors, publishedDate: '' });
                      }
                    }}
                    className={formErrors.publishedDate ? 'border-red-500' : ''}
                  />
                  {formErrors.publishedDate && (
                    <p className="text-sm text-red-500 mt-1">{formErrors.publishedDate}</p>
                  )}
                </div>
              </div>
            </div>

              {/* CVSS Vector and CWE ID */}
              <div className="grid gap-4 md:grid-cols-2">
                <div>
                  <Label htmlFor="cvssVector">CVSS Vector</Label>
                  <Input
                    id="cvssVector"
                    value={formData.cvssVector || ''}
                    onChange={(e) => setFormData({ ...formData, cvssVector: e.target.value })}
                    placeholder="CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                  />
                </div>
                <div>
                  <Label htmlFor="cweId">CWE ID</Label>
                  <Input
                    id="cweId"
                    value={formData.cweId || ''}
                    onChange={(e) => setFormData({ ...formData, cweId: e.target.value })}
                    placeholder="CWE-78"
                  />
                </div>
              </div>

              {/* Source and Category */}
              <div className="grid gap-4 md:grid-cols-2">
                <div>
                  <Label htmlFor="source">Source</Label>
                  <Select
                    value={formData.source || ''}
                    onValueChange={(value) => setFormData({ ...formData, source: value })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select source" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="NVD">NVD</SelectItem>
                      <SelectItem value="GITHUB">GitHub</SelectItem>
                      <SelectItem value="CVE">CVE</SelectItem>
                      <SelectItem value="VENDOR">Vendor</SelectItem>
                      <SelectItem value="RESEARCHER">Researcher</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="category">Category</Label>
                  <Input
                    id="category"
                    value={formData.category || ''}
                    onChange={(e) => setFormData({ ...formData, category: e.target.value })}
                    placeholder="Remote Code Execution"
                  />
                </div>
              </div>

              {/* Exploit and Patch Availability */}
              <div className="grid gap-4 md:grid-cols-3">
                <div className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="exploitAvailable"
                    checked={formData.exploitAvailable || false}
                    onChange={(e) => setFormData({ ...formData, exploitAvailable: e.target.checked })}
                    className="rounded"
                  />
                  <Label htmlFor="exploitAvailable">Exploit Available</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="patchAvailable"
                    checked={formData.patchAvailable || false}
                    onChange={(e) => setFormData({ ...formData, patchAvailable: e.target.checked })}
                    className="rounded"
                  />
                  <Label htmlFor="patchAvailable">Patch Available</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="kev"
                    checked={formData.kev || false}
                    onChange={(e) => setFormData({ ...formData, kev: e.target.checked })}
                    className="rounded"
                  />
                  <Label htmlFor="kev">Known Exploited (KEV)</Label>
                </div>
              </div>

              {/* Exploit Maturity */}
              <div>
                <Label htmlFor="exploitMaturity">Exploit Maturity</Label>
                <Select
                  value={formData.exploitMaturity || ''}
                  onValueChange={(value) => setFormData({ ...formData, exploitMaturity: value as any })}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select exploit maturity" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="UNPROVEN">Unproven</SelectItem>
                    <SelectItem value="PROOF_OF_CONCEPT">Proof of Concept</SelectItem>
                    <SelectItem value="FUNCTIONAL">Functional</SelectItem>
                    <SelectItem value="HIGH">High</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* EPSS Scores */}
              <div className="grid gap-4 md:grid-cols-2">
                <div>
                  <Label htmlFor="epssScore">EPSS Score</Label>
                  <Input
                    id="epssScore"
                    type="number"
                    min="0"
                    max="1"
                    step="0.001"
                    value={formData.epssScore || ''}
                    onChange={(e) => setFormData({ ...formData, epssScore: parseFloat(e.target.value) })}
                    placeholder="0.089"
                  />
                </div>
                <div>
                  <Label htmlFor="epssPercentile">EPSS Percentile</Label>
                  <Input
                    id="epssPercentile"
                    type="number"
                    min="0"
                    max="100"
                    value={formData.epssPercentile || ''}
                    onChange={(e) => setFormData({ ...formData, epssPercentile: parseInt(e.target.value) })}
                    placeholder="95"
                  />
                </div>
              </div>

              {/* CVSS Details */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold">CVSS Details</h3>
                <div className="grid gap-4 md:grid-cols-2">
                  <div>
                    <Label htmlFor="attackVector">Attack Vector</Label>
                    <Select
                      value={formData.attackVector || ''}
                      onValueChange={(value) => setFormData({ ...formData, attackVector: value as any })}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select attack vector" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="NETWORK">Network</SelectItem>
                        <SelectItem value="ADJACENT_NETWORK">Adjacent Network</SelectItem>
                        <SelectItem value="LOCAL">Local</SelectItem>
                        <SelectItem value="PHYSICAL">Physical</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label htmlFor="attackComplexity">Attack Complexity</Label>
                    <Select
                      value={formData.attackComplexity || ''}
                      onValueChange={(value) => setFormData({ ...formData, attackComplexity: value as any })}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select attack complexity" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="LOW">Low</SelectItem>
                        <SelectItem value="HIGH">High</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label htmlFor="privilegesRequired">Privileges Required</Label>
                    <Select
                      value={formData.privilegesRequired || ''}
                      onValueChange={(value) => setFormData({ ...formData, privilegesRequired: value as any })}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select privileges required" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="NONE">None</SelectItem>
                        <SelectItem value="LOW">Low</SelectItem>
                        <SelectItem value="HIGH">High</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label htmlFor="userInteraction">User Interaction</Label>
                    <Select
                      value={formData.userInteraction || ''}
                      onValueChange={(value) => setFormData({ ...formData, userInteraction: value as any })}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select user interaction" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="NONE">None</SelectItem>
                        <SelectItem value="REQUIRED">Required</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label htmlFor="scope">Scope</Label>
                    <Select
                      value={formData.scope || ''}
                      onValueChange={(value) => setFormData({ ...formData, scope: value as any })}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select scope" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="UNCHANGED">Unchanged</SelectItem>
                        <SelectItem value="CHANGED">Changed</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                
                <div className="grid gap-4 md:grid-cols-3">
                  <div>
                    <Label htmlFor="confidentialityImpact">Confidentiality Impact</Label>
                    <Select
                      value={formData.confidentialityImpact || ''}
                      onValueChange={(value) => setFormData({ ...formData, confidentialityImpact: value as any })}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select confidentiality impact" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="NONE">None</SelectItem>
                        <SelectItem value="LOW">Low</SelectItem>
                        <SelectItem value="HIGH">High</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label htmlFor="integrityImpact">Integrity Impact</Label>
                    <Select
                      value={formData.integrityImpact || ''}
                      onValueChange={(value) => setFormData({ ...formData, integrityImpact: value as any })}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select integrity impact" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="NONE">None</SelectItem>
                        <SelectItem value="LOW">Low</SelectItem>
                        <SelectItem value="HIGH">High</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label htmlFor="availabilityImpact">Availability Impact</Label>
                    <Select
                      value={formData.availabilityImpact || ''}
                      onValueChange={(value) => setFormData({ ...formData, availabilityImpact: value as any })}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select availability impact" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="NONE">None</SelectItem>
                        <SelectItem value="LOW">Low</SelectItem>
                        <SelectItem value="HIGH">High</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </div>

              {/* Threat Intelligence */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold">Threat Intelligence</h3>
                <div className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="exploitInTheWild"
                    checked={formData.threatIntelligence?.exploitInTheWild || false}
                    onChange={(e) => setFormData({ 
                      ...formData, 
                      threatIntelligence: { 
                        ...formData.threatIntelligence, 
                        exploitInTheWild: e.target.checked 
                      } 
                    })}
                    className="rounded"
                  />
                  <Label htmlFor="exploitInTheWild">Exploit in the Wild</Label>
                </div>
                
                <div>
                  <Label>Malware Families</Label>
                  <div className="space-y-2">
                    {(formData.threatIntelligence?.malwareFamilies || []).map((family, index) => (
                      <div key={index} className="flex gap-2">
                        <Input
                          value={family}
                          onChange={(e) => {
                            const newFamilies = [...(formData.threatIntelligence?.malwareFamilies || [])];
                            newFamilies[index] = e.target.value;
                            setFormData({ 
                              ...formData, 
                              threatIntelligence: { 
                                ...formData.threatIntelligence, 
                                malwareFamilies: newFamilies 
                              } 
                            });
                          }}
                          placeholder="e.g., Generic, APT"
                        />
                        <Button
                          type="button"
                          variant="outline"
                          size="sm"
                          onClick={() => {
                            const newFamilies = [...(formData.threatIntelligence?.malwareFamilies || [])];
                            newFamilies.splice(index, 1);
                            setFormData({ 
                              ...formData, 
                              threatIntelligence: { 
                                ...formData.threatIntelligence, 
                                malwareFamilies: newFamilies 
                              } 
                            });
                          }}
                        >
                          Remove
                        </Button>
                      </div>
                    ))}
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={() => {
                        setFormData({
                          ...formData,
                          threatIntelligence: {
                            ...formData.threatIntelligence,
                            malwareFamilies: [...(formData.threatIntelligence?.malwareFamilies || []), '']
                          }
                        });
                      }}
                    >
                      Add Malware Family
                    </Button>
                  </div>
                </div>

                <div>
                  <Label>Threat Actors</Label>
                  <div className="space-y-2">
                    {(formData.threatIntelligence?.threatActors || []).map((actor, index) => (
                      <div key={index} className="flex gap-2">
                        <Input
                          value={actor}
                          onChange={(e) => {
                            const newActors = [...(formData.threatIntelligence?.threatActors || [])];
                            newActors[index] = e.target.value;
                            setFormData({ 
                              ...formData, 
                              threatIntelligence: { 
                                ...formData.threatIntelligence, 
                                threatActors: newActors 
                              } 
                            });
                          }}
                          placeholder="e.g., APT Groups, Cybercriminals"
                        />
                        <Button
                          type="button"
                          variant="outline"
                          size="sm"
                          onClick={() => {
                            const newActors = [...(formData.threatIntelligence?.threatActors || [])];
                            newActors.splice(index, 1);
                            setFormData({ 
                              ...formData, 
                              threatIntelligence: { 
                                ...formData.threatIntelligence, 
                                threatActors: newActors 
                              } 
                            });
                          }}
                        >
                          Remove
                        </Button>
                      </div>
                    ))}
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={() => {
                        setFormData({
                          ...formData,
                          threatIntelligence: {
                            ...formData.threatIntelligence,
                            threatActors: [...(formData.threatIntelligence?.threatActors || []), '']
                          }
                        });
                      }}
                    >
                      Add Threat Actor
                    </Button>
                  </div>
                </div>

                <div>
                  <Label>Campaigns</Label>
                  <div className="space-y-2">
                    {(formData.threatIntelligence?.campaigns || []).map((campaign, index) => (
                      <div key={index} className="flex gap-2">
                        <Input
                          value={campaign}
                          onChange={(e) => {
                            const newCampaigns = [...(formData.threatIntelligence?.campaigns || [])];
                            newCampaigns[index] = e.target.value;
                            setFormData({ 
                              ...formData, 
                              threatIntelligence: { 
                                ...formData.threatIntelligence, 
                                campaigns: newCampaigns 
                              } 
                            });
                          }}
                          placeholder="e.g., Active Campaigns, Targeted Attacks"
                        />
                        <Button
                          type="button"
                          variant="outline"
                          size="sm"
                          onClick={() => {
                            const newCampaigns = [...(formData.threatIntelligence?.campaigns || [])];
                            newCampaigns.splice(index, 1);
                            setFormData({ 
                              ...formData, 
                              threatIntelligence: { 
                                ...formData.threatIntelligence, 
                                campaigns: newCampaigns 
                              } 
                            });
                          }}
                        >
                          Remove
                        </Button>
                      </div>
                    ))}
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={() => {
                        setFormData({
                          ...formData,
                          threatIntelligence: {
                            ...formData.threatIntelligence,
                            campaigns: [...(formData.threatIntelligence?.campaigns || []), '']
                          }
                        });
                      }}
                    >
                      Add Campaign
                    </Button>
                  </div>
                </div>
              </div>

              {/* Additional Fields */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold">Additional Details</h3>
                
                <div className="grid gap-4 md:grid-cols-2">
                  <div>
                    <Label htmlFor="patchDate">Patch Date</Label>
                    <Input
                      id="patchDate"
                      type="date"
                      value={formData.patchDate ? new Date(formData.patchDate).toISOString().split('T')[0] : ''}
                      onChange={(e) => setFormData({ ...formData, patchDate: e.target.value })}
                    />
                  </div>
                  <div>
                    <Label htmlFor="vendorAdvisory">Vendor Advisory</Label>
                    <Input
                      id="vendorAdvisory"
                      value={formData.vendorAdvisory || ''}
                      onChange={(e) => setFormData({ ...formData, vendorAdvisory: e.target.value })}
                      placeholder="https://vendor.com/advisory"
                    />
                  </div>
                </div>

                <div>
                  <Label>Related CVEs</Label>
                  <div className="space-y-2">
                    {(formData.relatedCves || []).map((cve, index) => (
                      <div key={index} className="flex gap-2">
                        <Input
                          value={cve}
                          onChange={(e) => {
                            const newCves = [...(formData.relatedCves || [])];
                            newCves[index] = e.target.value;
                            setFormData({ ...formData, relatedCves: newCves });
                          }}
                          placeholder="CVE-2023-1234"
                        />
                        <Button
                          type="button"
                          variant="outline"
                          size="sm"
                          onClick={() => {
                            const newCves = [...(formData.relatedCves || [])];
                            newCves.splice(index, 1);
                            setFormData({ ...formData, relatedCves: newCves });
                          }}
                        >
                          Remove
                        </Button>
                      </div>
                    ))}
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={() => {
                        setFormData({
                          ...formData,
                          relatedCves: [...(formData.relatedCves || []), '']
                        });
                      }}
                    >
                      Add Related CVE
                    </Button>
                  </div>
                </div>
              </div>

              {/* Array Fields */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold">Additional Information</h3>
                
                {/* Affected Software */}
                <div>
                  <Label>Affected Software</Label>
                  <div className="space-y-2">
                    {(formData.affectedSoftware || []).map((software, index) => (
                      <div key={index} className="flex gap-2">
                        <Input
                          value={software}
                          onChange={(e) => {
                            const newSoftware = [...(formData.affectedSoftware || [])];
                            newSoftware[index] = e.target.value;
                            setFormData({ ...formData, affectedSoftware: newSoftware });
                          }}
                          placeholder="e.g., Apache HTTP Server 2.4.0-2.4.58"
                        />
                        <Button
                          type="button"
                          variant="outline"
                          size="sm"
                          onClick={() => {
                            const newSoftware = [...(formData.affectedSoftware || [])];
                            newSoftware.splice(index, 1);
                            setFormData({ ...formData, affectedSoftware: newSoftware });
                          }}
                        >
                          Remove
                        </Button>
                      </div>
                    ))}
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={() => {
                        setFormData({
                          ...formData,
                          affectedSoftware: [...(formData.affectedSoftware || []), '']
                        });
                      }}
                    >
                      Add Software
                    </Button>
                  </div>
                </div>

                {/* References */}
                <div>
                  <Label>References</Label>
                  <div className="space-y-2">
                    {(formData.references || []).map((reference, index) => (
                      <div key={index} className="flex gap-2">
                        <Input
                          value={reference}
                          onChange={(e) => {
                            const newReferences = [...(formData.references || [])];
                            newReferences[index] = e.target.value;
                            setFormData({ ...formData, references: newReferences });
                          }}
                          placeholder="https://example.com/reference"
                        />
                        <Button
                          type="button"
                          variant="outline"
                          size="sm"
                          onClick={() => {
                            const newReferences = [...(formData.references || [])];
                            newReferences.splice(index, 1);
                            setFormData({ ...formData, references: newReferences });
                          }}
                        >
                          Remove
                        </Button>
                      </div>
                    ))}
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={() => {
                        setFormData({
                          ...formData,
                          references: [...(formData.references || []), '']
                        });
                      }}
                    >
                      Add Reference
                    </Button>
                  </div>
                </div>

                {/* Tags */}
                <div>
                  <Label>Tags</Label>
                  <div className="space-y-2">
                    {(formData.tags || []).map((tag, index) => (
                      <div key={index} className="flex gap-2">
                        <Input
                          value={tag}
                          onChange={(e) => {
                            const newTags = [...(formData.tags || [])];
                            newTags[index] = e.target.value;
                            setFormData({ ...formData, tags: newTags });
                          }}
                          placeholder="e.g., rce, apache, critical"
                        />
                        <Button
                          type="button"
                          variant="outline"
                          size="sm"
                          onClick={() => {
                            const newTags = [...(formData.tags || [])];
                            newTags.splice(index, 1);
                            setFormData({ ...formData, tags: newTags });
                          }}
                        >
                          Remove
                        </Button>
                      </div>
                    ))}
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={() => {
                        setFormData({
                          ...formData,
                          tags: [...(formData.tags || []), '']
                        });
                      }}
                    >
                      Add Tag
                    </Button>
                  </div>
                </div>

                {/* Mitigations */}
                <div>
                  <Label>Mitigations</Label>
                  <div className="space-y-2">
                    {(formData.mitigations || []).map((mitigation, index) => (
                      <div key={index} className="flex gap-2">
                        <Textarea
                          value={mitigation}
                          onChange={(e) => {
                            const newMitigations = [...(formData.mitigations || [])];
                            newMitigations[index] = e.target.value;
                            setFormData({ ...formData, mitigations: newMitigations });
                          }}
                          placeholder="e.g., Apply vendor patches immediately"
                          rows={2}
                        />
                        <Button
                          type="button"
                          variant="outline"
                          size="sm"
                          onClick={() => {
                            const newMitigations = [...(formData.mitigations || [])];
                            newMitigations.splice(index, 1);
                            setFormData({ ...formData, mitigations: newMitigations });
                          }}
                        >
                          Remove
                        </Button>
                      </div>
                    ))}
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={() => {
                        setFormData({
                          ...formData,
                          mitigations: [...(formData.mitigations || []), '']
                        });
                      }}
                    >
                      Add Mitigation
                    </Button>
                  </div>
                </div>

                {/* Workarounds */}
                <div>
                  <Label>Workarounds</Label>
                  <div className="space-y-2">
                    {(formData.workarounds || []).map((workaround, index) => (
                      <div key={index} className="flex gap-2">
                        <Textarea
                          value={workaround}
                          onChange={(e) => {
                            const newWorkarounds = [...(formData.workarounds || [])];
                            newWorkarounds[index] = e.target.value;
                            setFormData({ ...formData, workarounds: newWorkarounds });
                          }}
                          placeholder="e.g., Disable affected modules temporarily"
                          rows={2}
                        />
                        <Button
                          type="button"
                          variant="outline"
                          size="sm"
                          onClick={() => {
                            const newWorkarounds = [...(formData.workarounds || [])];
                            newWorkarounds.splice(index, 1);
                            setFormData({ ...formData, workarounds: newWorkarounds });
                          }}
                        >
                          Remove
                        </Button>
                      </div>
                    ))}
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={() => {
                        setFormData({
                          ...formData,
                          workarounds: [...(formData.workarounds || []), '']
                        });
                      }}
                    >
                      Add Workaround
                    </Button>
                  </div>
                </div>
              </div>

          </div>
          
          <DialogFooter className="flex justify-end space-x-2 pt-4 border-t">
            <Button
              variant="outline"
              onClick={() => {
                setShowForm(false);
                setEditingVulnerability(null);
                setFormData({});
                setFormErrors({});
              }}
              disabled={formLoading}
            >
              Cancel
            </Button>
            <Button
              onClick={editingVulnerability ? handleUpdateVulnerability : handleCreateVulnerability}
              disabled={formLoading}
            >
              {formLoading && <Loader2 className="h-4 w-4 mr-2 animate-spin" />}
              {editingVulnerability ? 'Update Vulnerability' : 'Create Vulnerability'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Professional Delete Confirmation Dialog */}
      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle className="flex items-center gap-2">
              <Trash2 className="h-5 w-5 text-red-500" />
              Delete Vulnerability
            </AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to delete <strong>{vulnerabilityToDelete?.cveId}</strong>?
              <br />
              <span className="text-sm text-muted-foreground mt-2 block">
                Title: {vulnerabilityToDelete?.title}
              </span>
              <br />
              <span className="text-sm text-red-600 font-medium">
                This action cannot be undone.
              </span>
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel disabled={deleteLoading}>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={confirmDelete}
              disabled={deleteLoading}
              className="bg-red-600 hover:bg-red-700"
            >
              {deleteLoading && <Loader2 className="h-4 w-4 mr-2 animate-spin" />}
              Delete Vulnerability
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Professional Vulnerability View Drawer */}
      <Drawer open={drawerOpen} onOpenChange={setDrawerOpen}>
        <DrawerContent className="max-h-[85vh]">
          <DrawerHeader className="border-b">
            <DrawerTitle className="flex items-center gap-2">
              <Eye className="h-5 w-5" />
              Vulnerability Details: {selectedVulnerability?.cveId}
            </DrawerTitle>
            <DrawerDescription>
              Comprehensive view of vulnerability information
            </DrawerDescription>
          </DrawerHeader>
          
          {selectedVulnerability && (
            <div className="p-6 space-y-6 overflow-y-auto">
              {/* Basic Information */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold border-b pb-2">Basic Information</h3>
                <div className="grid gap-4 md:grid-cols-2">
                  <div>
                    <Label className="text-sm font-medium text-muted-foreground">CVE ID</Label>
                    <p className="text-lg font-mono">{selectedVulnerability.cveId}</p>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-muted-foreground">Severity</Label>
                    <div className="mt-1">
                      <Badge variant={getSeverityBadgeVariant(selectedVulnerability.severity)}>
                        {selectedVulnerability.severity}
                      </Badge>
                    </div>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-muted-foreground">CVSS Score</Label>
                    <p className="text-lg font-semibold">{selectedVulnerability.cvssScore}</p>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-muted-foreground">Published Date</Label>
                    <p>{new Date(selectedVulnerability.publishedDate).toLocaleDateString()}</p>
                  </div>
                </div>
                
                <div>
                  <Label className="text-sm font-medium text-muted-foreground">Title</Label>
                  <p className="text-lg font-medium mt-1">{selectedVulnerability.title}</p>
                </div>
                
                <div>
                  <Label className="text-sm font-medium text-muted-foreground">Description</Label>
                  <p className="mt-1 text-sm leading-relaxed">{selectedVulnerability.description}</p>
                </div>
              </div>

              {/* Technical Details */}
              {(selectedVulnerability.cvssVector || selectedVulnerability.cweId || selectedVulnerability.source) && (
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold border-b pb-2">Technical Details</h3>
                  <div className="grid gap-4 md:grid-cols-2">
                    {selectedVulnerability.cvssVector && (
                      <div>
                        <Label className="text-sm font-medium text-muted-foreground">CVSS Vector</Label>
                        <p className="font-mono text-sm mt-1 break-all">{selectedVulnerability.cvssVector}</p>
                      </div>
                    )}
                    {selectedVulnerability.cweId && (
                      <div>
                        <Label className="text-sm font-medium text-muted-foreground">CWE ID</Label>
                        <p className="font-mono text-sm mt-1">{selectedVulnerability.cweId}</p>
                      </div>
                    )}
                    {selectedVulnerability.source && (
                      <div>
                        <Label className="text-sm font-medium text-muted-foreground">Source</Label>
                        <p className="text-sm mt-1">{selectedVulnerability.source}</p>
                      </div>
                    )}
                    {selectedVulnerability.category && (
                      <div>
                        <Label className="text-sm font-medium text-muted-foreground">Category</Label>
                        <p className="text-sm mt-1">{selectedVulnerability.category}</p>
                      </div>
                    )}
                  </div>
                </div>
              )}

              {/* Affected Software */}
              {selectedVulnerability.affectedSoftware && selectedVulnerability.affectedSoftware.length > 0 && (
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold border-b pb-2">Affected Software</h3>
                  <div className="space-y-2">
                    {selectedVulnerability.affectedSoftware.map((software, index) => (
                      <div key={index} className="p-3 bg-muted rounded-lg">
                        <p className="text-sm">{software}</p>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* References */}
              {selectedVulnerability.references && selectedVulnerability.references.length > 0 && (
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold border-b pb-2">References</h3>
                  <div className="space-y-2">
                    {selectedVulnerability.references.map((reference, index) => (
                      <div key={index} className="p-3 bg-muted rounded-lg">
                        <a 
                          href={reference} 
                          target="_blank" 
                          rel="noopener noreferrer"
                          className="text-sm text-blue-600 hover:text-blue-800 break-all"
                        >
                          {reference}
                        </a>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Tags */}
              {selectedVulnerability.tags && selectedVulnerability.tags.length > 0 && (
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold border-b pb-2">Tags</h3>
                  <div className="flex flex-wrap gap-2">
                    {selectedVulnerability.tags.map((tag, index) => (
                      <Badge key={index} variant="secondary">{tag}</Badge>
                    ))}
                  </div>
                </div>
              )}

              {/* Mitigations */}
              {selectedVulnerability.mitigations && selectedVulnerability.mitigations.length > 0 && (
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold border-b pb-2">Mitigations</h3>
                  <div className="space-y-2">
                    {selectedVulnerability.mitigations.map((mitigation, index) => (
                      <div key={index} className="p-3 bg-green-50 dark:bg-green-950 rounded-lg border-l-4 border-green-500">
                        <p className="text-sm">{mitigation}</p>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Workarounds */}
              {selectedVulnerability.workarounds && selectedVulnerability.workarounds.length > 0 && (
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold border-b pb-2">Workarounds</h3>
                  <div className="space-y-2">
                    {selectedVulnerability.workarounds.map((workaround, index) => (
                      <div key={index} className="p-3 bg-yellow-50 dark:bg-yellow-950 rounded-lg border-l-4 border-yellow-500">
                        <p className="text-sm">{workaround}</p>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}
        </DrawerContent>
      </Drawer>
    </div>
  );
}
