export interface Vulnerability {
  cveId: string;
  title: string;
  description: string;
  severity: 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW';
  cvssScore: number;
  cvssVector?: string;
  publishedDate: string;
  lastModifiedDate: string;
  affectedSoftware: string[];
  references: string[];
  cweId?: string;
  exploitAvailable: boolean;
  exploitMaturity?: 'UNPROVEN' | 'PROOF_OF_CONCEPT' | 'FUNCTIONAL' | 'HIGH';
  patchAvailable: boolean;
  patchDate?: string;
  vendorAdvisory?: string;
  tags: string[];
  category: string;
  attackVector?: 'NETWORK' | 'ADJACENT_NETWORK' | 'LOCAL' | 'PHYSICAL';
  attackComplexity?: 'LOW' | 'HIGH';
  privilegesRequired?: 'NONE' | 'LOW' | 'HIGH';
  userInteraction?: 'NONE' | 'REQUIRED';
  scope?: 'UNCHANGED' | 'CHANGED';
  confidentialityImpact?: 'NONE' | 'LOW' | 'HIGH';
  integrityImpact?: 'NONE' | 'LOW' | 'HIGH';
  availabilityImpact?: 'NONE' | 'LOW' | 'HIGH';
  epssScore?: number;
  epssPercentile?: number;
  kev?: boolean; // Known Exploited Vulnerabilities
  trending?: boolean;
  threatIntelligence?: {
    exploitInTheWild: boolean;
    malwareFamilies: string[];
    threatActors: string[];
    campaigns: string[];
  };
  mitigations?: string[];
  workarounds?: string[];
  relatedCves?: string[];
  createdAt: string;
  updatedAt: string;
}

export interface VulnerabilityStats {
  total: number;
  bySeverity: {
    CRITICAL: number;
    HIGH: number;
    MEDIUM: number;
    LOW: number;
  };
  byCategory: Record<string, number>;
  withExploits: number;
  withPatches: number;
  trending: number;
  recentlyPublished: number;
  lastUpdated: string;
}

export interface VulnerabilityTrend {
  date: string;
  count: number;
  severity: {
    CRITICAL: number;
    HIGH: number;
    MEDIUM: number;
    LOW: number;
  };
}

export interface TopAffectedSoftware {
  software: string;
  count: number;
  criticalCount: number;
  highCount: number;
  mediumCount: number;
  lowCount: number;
  latestCve: string;
  latestDate: string;
}

export interface VulnerabilityFilter {
  query?: string;
  severity?: ('CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW')[];
  dateRange?: {
    start: string;
    end: string;
  };
  affectedSoftware?: string[];
  cvssScore?: {
    min: number;
    max: number;
  };
  exploitAvailable?: boolean;
  patchAvailable?: boolean;
  category?: string[];
  tags?: string[];
  cweId?: string[];
  trending?: boolean;
  kev?: boolean;
  sortBy?:
    | 'publishedDate'
    | 'lastModifiedDate'
    | 'cvssScore'
    | 'severity'
    | 'cveId';
  sortOrder?: 'asc' | 'desc';
}

export interface VulnerabilitySearchResult {
  vulnerabilities: Vulnerability[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
    hasNext: boolean;
    hasPrev: boolean;
  };
  filters: VulnerabilityFilter;
  stats: {
    totalResults: number;
    severityBreakdown: Record<string, number>;
    categoryBreakdown: Record<string, number>;
  };
}

export interface RelatedVulnerability {
  cveId: string;
  title: string;
  severity: string;
  cvssScore: number;
  publishedDate: string;
  relationshipType:
    | 'SAME_SOFTWARE'
    | 'SAME_CWE'
    | 'SAME_VENDOR'
    | 'SIMILAR_ATTACK';
  similarity: number;
}

export interface VulnerabilityComment {
  id: string;
  vulnerabilityId: string;
  userId: string;
  content: string;
  isPublic: boolean;
  createdAt: string;
  updatedAt: string;
  user: {
    email: string;
    displayName?: string;
  };
}

export interface VulnerabilityExport {
  id: string;
  userId: string;
  format: 'json' | 'csv' | 'pdf';
  filters: VulnerabilityFilter;
  vulnerabilityCount: number;
  fileSize: number;
  downloadUrl: string;
  expiresAt: string;
  createdAt: string;
  status: 'PENDING' | 'COMPLETED' | 'FAILED' | 'EXPIRED';
}

// Component prop types
export interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
  isLoading: boolean;
  onSort: (field: string, direction: 'asc' | 'desc') => void;
  onFilter: (filters: VulnerabilityFilter) => void;
  onBookmark: (vulnerabilityId: string) => void;
  onView: (vulnerabilityId: string) => void;
  selectedVulnerabilities?: string[];
  onSelectionChange?: (selected: string[]) => void;
}

export interface VulnerabilityCardProps {
  vulnerability: Vulnerability;
  isBookmarked?: boolean;
  onBookmark?: (vulnerabilityId: string) => void;
  onView?: (vulnerabilityId: string) => void;
  showActions?: boolean;
  compact?: boolean;
}

export interface VulnerabilityDetailsProps {
  vulnerability: Vulnerability;
  relatedVulnerabilities?: RelatedVulnerability[];
  comments?: VulnerabilityComment[];
  isBookmarked?: boolean;
  onBookmark?: (vulnerabilityId: string) => void;
  onComment?: (content: string) => void;
}

// API types
export interface VulnerabilityApiResponse {
  data: Vulnerability[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
  };
  success: boolean;
  error?: string;
}

export interface VulnerabilityStatsApiResponse {
  data: VulnerabilityStats;
  success: boolean;
  error?: string;
}

// Utility types
export type SeverityLevel = 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW';
export type ExploitMaturity =
  | 'UNPROVEN'
  | 'PROOF_OF_CONCEPT'
  | 'FUNCTIONAL'
  | 'HIGH';
export type AttackVector =
  | 'NETWORK'
  | 'ADJACENT_NETWORK'
  | 'LOCAL'
  | 'PHYSICAL';
export type AttackComplexity = 'LOW' | 'HIGH';
export type PrivilegesRequired = 'NONE' | 'LOW' | 'HIGH';
export type UserInteraction = 'NONE' | 'REQUIRED';
export type Scope = 'UNCHANGED' | 'CHANGED';
export type Impact = 'NONE' | 'LOW' | 'HIGH';
